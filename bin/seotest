#!/usr/bin/env node

/* eslint-disable no-undef */
/* eslint-disable @typescript-eslint/no-var-requires */
require("ts-node").register({ project: "tsconfig.json" });
const prompts = require("prompts");
const { exec } = require("child_process");
const { readdirSync, readFileSync, writeFileSync, existsSync } = require("fs");
const path = require("path");
const yargs = require("yargs/yargs")(process.argv.slice(2)).parse();
const testDir = path.join(__dirname, "/../src/__test__");
const scanDir = readdirSync(testDir);
const build = [];
// run last script
const runLastScript = yargs._[0].toLowerCase() == "l";

if (!existsSync(__dirname + "/test.json")) {
  writeFileSync(__dirname + "/test.json", JSON.stringify({}));
}

let tests = require("./test.json");

(async () => {
  if (runLastScript) {
    let cancel = false;
    tests.forEach((test) => {
      if (test.lastrun) {
        run(test.value);
        cancel = true;
      }
    });
    if (cancel) return;
  }
  scanScripts();
  const response = await prompts([
    {
      type: "multiselect",
      name: "script",
      message: "Pick scripts to test",
      choices: tests
    }
  ]);

  /**
   * @type {string[]}
   */
  const scripts = response.script;
  tests.forEach((test) => {
    const match = test.value == scripts[0];
    if (match) test.lastrun = true;
  });
  writeFileSync(__dirname + "/test.json", JSON.stringify(tests));
  run(scripts[0]);
})();

function run(script) {
  exec(`node -r ts-node/register ${script}`, (err, stdout, stderr) => {
    if (err) {
      throw err;
    }
    if (stdout.length > 0) {
      console.log(stdout);
    }
    if (stderr.length > 0) {
      console.log(stderr);
    }
  });
}

function scanScripts() {
  scanDir
    .map((dir) => {
      return path.join(testDir, dir);
    })
    .forEach((file, index, array) => {
      const template = {
        value: file,
        title: path.basename(file.replace(/-_/, " "), ".ts"),
        lastrun: false
      };
      const read = readFileSync(file).toString();
      const regex = /^\/\/.*title:\s?(.*)/gm;
      let match = regex.exec(read);
      if (match && typeof match[1] == "string" && match[1].length > 0) {
        template.title = match[1].trim();
      }
      build.push(template);
      writeFileSync(path.join(__dirname, "test.json"), JSON.stringify(build));
    });
}
