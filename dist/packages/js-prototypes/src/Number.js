"use strict";
Number.prototype.getMS = function (type) {
    const self = this;
    return this * 60 * 1000;
};
Number.prototype.addHour = function (source) {
    const self = this;
    const Hour = this * 60 * 1000; /* ms */
    if (!source)
        source = new Date();
    return new Date(source.getTime() + Hour).getTime();
};
Number.prototype.AddZero = function (b, c) {
    const l = String(b || 10).length - String(this).length + 1;
    return l > 0 ? new Array(l).join(c || "0") + this : this;
};
/**
 * Odd or Even (Ganjil Genap);
 * @param n
 * @param type odd or even
 */
function oddoreven(n, type) {
    if (!type) {
        type = "odd";
    }
    const time = !n ? new Date().getDay() : Number(n);
    if (!/^-?\d+jQuery/.test(time.toString())) {
        alert("arguments is not number, please remove quote");
        return null;
    }
    const hasil = time % 2;
    const rType = /^(odd|ganjil)$/.test(type) ? "1" : "0";
    //return hasil == (type == ('odd' || 'ganjil') ? 1 : 0);
    return hasil.toString() == rType.toString();
}
/**
 * strpad / startwith zero [0]
 * @param {number} val
 */
function strpad(val) {
    if (val >= 10) {
        return val;
    }
    else {
        return "0" + val;
    }
}
/**
 * is variable number?
 * @param n
 * @returns
 */
function isInt(n) {
    return Number(n) === n && n % 1 === 0;
}
/**
 * is variable float?
 * @param n
 * @returns
 */
function isFloat(n) {
    return Number(n) === n && n % 1 !== 0;
}
if (typeof module.exports != 'undefined') {
    global.isInt = isInt;
    global.isFloat = isFloat;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTnVtYmVyLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9qcy1wcm90b3R5cGVzL3NyYy9OdW1iZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQXVCQSxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLElBQUk7SUFDckMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ2xCLE9BQU8sSUFBSSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7QUFDMUIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsVUFBVSxNQUFNO0lBQ3pDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQztJQUNsQixNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLFFBQVE7SUFDdkMsSUFBSSxDQUFDLE1BQU07UUFBRSxNQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUNqQyxPQUFPLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNyRCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQzNELE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUMzRCxDQUFDLENBQUM7QUFFRjs7OztHQUlHO0FBQ0gsU0FBUyxTQUFTLENBQUMsQ0FBUyxFQUFFLElBQVk7SUFDeEMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULElBQUksR0FBRyxLQUFLLENBQUM7S0FDZDtJQUNELE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFbEQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUU7UUFDekMsS0FBSyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7UUFDdEQsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUVELE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUM7SUFFdkIsTUFBTSxLQUFLLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUN0RCx3REFBd0Q7SUFFeEQsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQzlDLENBQUM7QUFFRDs7O0dBR0c7QUFDSCxTQUFTLE1BQU0sQ0FBQyxHQUFXO0lBQ3pCLElBQUksR0FBRyxJQUFJLEVBQUUsRUFBRTtRQUNiLE9BQU8sR0FBRyxDQUFDO0tBQ1o7U0FBTTtRQUNMLE9BQU8sR0FBRyxHQUFHLEdBQUcsQ0FBQztLQUNsQjtBQUNILENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsU0FBUyxLQUFLLENBQUMsQ0FBQztJQUNkLE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQVMsT0FBTyxDQUFDLENBQUM7SUFDaEIsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3hDLENBQUM7QUFFRCxJQUFJLE9BQU8sTUFBTSxDQUFDLE9BQU8sSUFBSSxXQUFXLEVBQUU7SUFDeEMsTUFBTSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7SUFDcEIsTUFBTSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7Q0FDekIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuZGVjbGFyZSBpbnRlcmZhY2UgTnVtYmVyIHtcbiAgZ2V0TVModHlwZTogc3RyaW5nKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBHZXQgWCBIb3VyIGZyb20gZGF0ZVxuICAgKiBAcmV0dXJuIG51bWJlciBtcyBmcm9tIERhdGUoKS5nZXRUaW1lKClcbiAgICogQGV4YW1wbGVcbiAgICogZ2V0IGAxIGhvdXIgZnJvbSBjdXJyZW50IERhdGUoKWBcbiAgICogMS5hZGRIb3VyKClcbiAgICogZ2V0IGAxIGhvdXIgZnJvbSBzcGVzaWZpYyBEYXRlKClgXG4gICAqIDEuYWRkSG91cihuZXcgRGF0ZSgnMjAyMC0wNi0wNCAwMToxMDo1MycpKVxuICAgKi9cbiAgYWRkSG91cihzb3VyY2U6IERhdGUgfCBudWxsKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBhZGQgemVybyBsZWFkaW5nXG4gICAqIEBwYXJhbSBhZGRcbiAgICogQHBhcmFtIHRhcmdldFxuICAgKi9cbiAgQWRkWmVybyhhZGQ6IG51bWJlciwgdGFyZ2V0OiBzdHJpbmcpOiBudW1iZXI7XG59XG5cbk51bWJlci5wcm90b3R5cGUuZ2V0TVMgPSBmdW5jdGlvbiAodHlwZSkge1xuICBjb25zdCBzZWxmID0gdGhpcztcbiAgcmV0dXJuIHRoaXMgKiA2MCAqIDEwMDA7XG59O1xuXG5OdW1iZXIucHJvdG90eXBlLmFkZEhvdXIgPSBmdW5jdGlvbiAoc291cmNlKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzO1xuICBjb25zdCBIb3VyID0gdGhpcyAqIDYwICogMTAwMDsgLyogbXMgKi9cbiAgaWYgKCFzb3VyY2UpIHNvdXJjZSA9IG5ldyBEYXRlKCk7XG4gIHJldHVybiBuZXcgRGF0ZShzb3VyY2UuZ2V0VGltZSgpICsgSG91cikuZ2V0VGltZSgpO1xufTtcblxuTnVtYmVyLnByb3RvdHlwZS5BZGRaZXJvID0gZnVuY3Rpb24gKGIsIGMpIHtcbiAgY29uc3QgbCA9IFN0cmluZyhiIHx8IDEwKS5sZW5ndGggLSBTdHJpbmcodGhpcykubGVuZ3RoICsgMTtcbiAgcmV0dXJuIGwgPiAwID8gbmV3IEFycmF5KGwpLmpvaW4oYyB8fCBcIjBcIikgKyB0aGlzIDogdGhpcztcbn07XG5cbi8qKlxuICogT2RkIG9yIEV2ZW4gKEdhbmppbCBHZW5hcCk7XG4gKiBAcGFyYW0gblxuICogQHBhcmFtIHR5cGUgb2RkIG9yIGV2ZW5cbiAqL1xuZnVuY3Rpb24gb2Rkb3JldmVuKG46IHN0cmluZywgdHlwZTogc3RyaW5nKSB7XG4gIGlmICghdHlwZSkge1xuICAgIHR5cGUgPSBcIm9kZFwiO1xuICB9XG4gIGNvbnN0IHRpbWUgPSAhbiA/IG5ldyBEYXRlKCkuZ2V0RGF5KCkgOiBOdW1iZXIobik7XG5cbiAgaWYgKCEvXi0/XFxkK2pRdWVyeS8udGVzdCh0aW1lLnRvU3RyaW5nKCkpKSB7XG4gICAgYWxlcnQoXCJhcmd1bWVudHMgaXMgbm90IG51bWJlciwgcGxlYXNlIHJlbW92ZSBxdW90ZVwiKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGhhc2lsID0gdGltZSAlIDI7XG5cbiAgY29uc3QgclR5cGUgPSAvXihvZGR8Z2FuamlsKSQvLnRlc3QodHlwZSkgPyBcIjFcIiA6IFwiMFwiO1xuICAvL3JldHVybiBoYXNpbCA9PSAodHlwZSA9PSAoJ29kZCcgfHwgJ2dhbmppbCcpID8gMSA6IDApO1xuXG4gIHJldHVybiBoYXNpbC50b1N0cmluZygpID09IHJUeXBlLnRvU3RyaW5nKCk7XG59XG5cbi8qKlxuICogc3RycGFkIC8gc3RhcnR3aXRoIHplcm8gWzBdXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsXG4gKi9cbmZ1bmN0aW9uIHN0cnBhZCh2YWw6IG51bWJlcikge1xuICBpZiAodmFsID49IDEwKSB7XG4gICAgcmV0dXJuIHZhbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCIwXCIgKyB2YWw7XG4gIH1cbn1cblxuLyoqXG4gKiBpcyB2YXJpYWJsZSBudW1iZXI/XG4gKiBAcGFyYW0gblxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gaXNJbnQobikge1xuICByZXR1cm4gTnVtYmVyKG4pID09PSBuICYmIG4gJSAxID09PSAwO1xufVxuXG4vKipcbiAqIGlzIHZhcmlhYmxlIGZsb2F0P1xuICogQHBhcmFtIG5cbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIGlzRmxvYXQobikge1xuICByZXR1cm4gTnVtYmVyKG4pID09PSBuICYmIG4gJSAxICE9PSAwO1xufVxuXG5pZiAodHlwZW9mIG1vZHVsZS5leHBvcnRzICE9ICd1bmRlZmluZWQnKSB7XG4gIGdsb2JhbC5pc0ludCA9IGlzSW50XG4gIGdsb2JhbC5pc0Zsb2F0ID0gaXNGbG9hdFxufSJdfQ==