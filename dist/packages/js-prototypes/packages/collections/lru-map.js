"use strict";
var Shim = require("./shim");
var LruSet = require("./lru-set");
var GenericCollection = require("./generic-collection");
var GenericMap = require("./generic-map");
var PropertyChanges = require("./listen/property-changes");
var MapChanges = require("./listen/map-changes");
module.exports = LruMap;
function LruMap(values, maxLength, equals, hash, getDefault) {
    if (!(this instanceof LruMap)) {
        return new LruMap(values, maxLength, equals, hash, getDefault);
    }
    equals = equals || Object.equals;
    hash = hash || Object.hash;
    getDefault = getDefault || Function.noop;
    this.contentEquals = equals;
    this.contentHash = hash;
    this.getDefault = getDefault;
    this.store = new LruSet(undefined, maxLength, function keysEqual(a, b) {
        return equals(a.key, b.key);
    }, function keyHash(item) {
        return hash(item.key);
    });
    this.length = 0;
    this.addEach(values);
}
LruMap.LruMap = LruMap; // hack so require("lru-map").LruMap will work in MontageJS
Object.addEach(LruMap.prototype, GenericCollection.prototype);
Object.addEach(LruMap.prototype, GenericMap.prototype);
Object.addEach(LruMap.prototype, PropertyChanges.prototype);
Object.addEach(LruMap.prototype, MapChanges.prototype);
Object.defineProperty(LruMap.prototype, "size", GenericCollection._sizePropertyDescriptor);
LruMap.from = GenericCollection.from;
LruMap.prototype.constructClone = function (values) {
    return new this.constructor(values, this.maxLength, this.contentEquals, this.contentHash, this.getDefault);
};
LruMap.prototype.log = function (charmap, stringify) {
    stringify = stringify || this.stringify;
    this.store.log(charmap, stringify);
};
LruMap.prototype.stringify = function (item, leader) {
    return leader + JSON.stringify(item.key) + ": " + JSON.stringify(item.value);
};
LruMap.prototype.addMapChangeListener = function () {
    if (!this.dispatchesMapChanges) {
        // Detect LRU deletions in the LruSet and emit as MapChanges.
        // Array and Heap have no store.
        // Dict and FastMap define no listeners on their store.
        var self = this;
        this.store.addBeforeRangeChangeListener(function (plus, minus) {
            if (plus.length && minus.length) { // LRU item pruned
                self.dispatchBeforeMapChange(minus[0].key, undefined);
            }
        });
        this.store.addRangeChangeListener(function (plus, minus) {
            if (plus.length && minus.length) {
                self.dispatchMapChange(minus[0].key, undefined);
            }
        });
    }
    MapChanges.prototype.addMapChangeListener.apply(this, arguments);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHJ1LW1hcC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvanMtcHJvdG90eXBlcy9wYWNrYWdlcy9jb2xsZWN0aW9ucy9scnUtbWFwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM3QixJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDbEMsSUFBSSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUN4RCxJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDMUMsSUFBSSxlQUFlLEdBQUcsT0FBTyxDQUFDLDJCQUEyQixDQUFDLENBQUM7QUFDM0QsSUFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFFakQsTUFBTSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7QUFFeEIsU0FBUyxNQUFNLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFVBQVU7SUFDdkQsSUFBSSxDQUFDLENBQUMsSUFBSSxZQUFZLE1BQU0sQ0FBQyxFQUFFO1FBQzNCLE9BQU8sSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0tBQ2xFO0lBQ0QsTUFBTSxHQUFHLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2pDLElBQUksR0FBRyxJQUFJLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQztJQUMzQixVQUFVLEdBQUcsVUFBVSxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUM7SUFDekMsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUM7SUFDNUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7SUFDeEIsSUFBSSxDQUFD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QXNCLENBQUMsVUFBUyxJQUFJLEVBQUUsS0FBSztZQUNsRCxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTtnQkFDN0IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7YUFDbkQ7UUFDTCxDQUFDLENBQUMsQ0FBQztLQUNOO0lBQ0QsVUFBVSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3JFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgU2hpbSA9IHJlcXVpcmUoXCIuL3NoaW1cIik7XG52YXIgTHJ1U2V0ID0gcmVxdWlyZShcIi4vbHJ1LXNldFwiKTtcbnZhciBHZW5lcmljQ29sbGVjdGlvbiA9IHJlcXVpcmUoXCIuL2dlbmVyaWMtY29sbGVjdGlvblwiKTtcbnZhciBHZW5lcmljTWFwID0gcmVxdWlyZShcIi4vZ2VuZXJpYy1tYXBcIik7XG52YXIgUHJvcGVydHlDaGFuZ2VzID0gcmVxdWlyZShcIi4vbGlzdGVuL3Byb3BlcnR5LWNoYW5nZXNcIik7XG52YXIgTWFwQ2hhbmdlcyA9IHJlcXVpcmUoXCIuL2xpc3Rlbi9tYXAtY2hhbmdlc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBMcnVNYXA7XG5cbmZ1bmN0aW9uIExydU1hcCh2YWx1ZXMsIG1heExlbmd0aCwgZXF1YWxzLCBoYXNoLCBnZXREZWZhdWx0KSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIExydU1hcCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMcnVNYXAodmFsdWVzLCBtYXhMZW5ndGgsIGVxdWFscywgaGFzaCwgZ2V0RGVmYXVsdCk7XG4gICAgfVxuICAgIGVxdWFscyA9IGVxdWFscyB8fCBPYmplY3QuZXF1YWxzO1xuICAgIGhhc2ggPSBoYXNoIHx8IE9iamVjdC5oYXNoO1xuICAgIGdldERlZmF1bHQgPSBnZXREZWZhdWx0IHx8IEZ1bmN0aW9uLm5vb3A7XG4gICAgdGhpcy5jb250ZW50RXF1YWxzID0gZXF1YWxzO1xuICAgIHRoaXMuY29udGVudEhhc2ggPSBoYXNoO1xuICAgIHRoaXMuZ2V0RGVmYXVsdCA9IGdldERlZmF1bHQ7XG4gICAgdGhpcy5zdG9yZSA9IG5ldyBMcnVTZXQoXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgbWF4TGVuZ3RoLFxuICAgICAgICBmdW5jdGlvbiBrZXlzRXF1YWwoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGVxdWFscyhhLmtleSwgYi5rZXkpO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiBrZXlIYXNoKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBoYXNoKGl0ZW0ua2V5KTtcbiAgICAgICAgfVxuICAgICk7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIHRoaXMuYWRkRWFjaCh2YWx1ZXMpO1xufVxuXG5McnVNYXAuTHJ1TWFwID0gTHJ1TWFwOyAvLyBoYWNrIHNvIHJlcXVpcmUoXCJscnUtbWFwXCIpLkxydU1hcCB3aWxsIHdvcmsgaW4gTW9udGFnZUpTXG5cbk9iamVjdC5hZGRFYWNoKExydU1hcC5wcm90b3R5cGUsIEdlbmVyaWNDb2xsZWN0aW9uLnByb3RvdHlwZSk7XG5PYmplY3QuYWRkRWFjaChMcnVNYXAucHJvdG90eXBlLCBHZW5lcmljTWFwLnByb3RvdHlwZSk7XG5PYmplY3QuYWRkRWFjaChMcnVNYXAucHJvdG90eXBlLCBQcm9wZXJ0eUNoYW5nZXMucHJvdG90eXBlKTtcbk9iamVjdC5hZGRFYWNoKExydU1hcC5wcm90b3R5cGUsIE1hcENoYW5nZXMucHJvdG90eXBlKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KExydU1hcC5wcm90b3R5cGUsXCJzaXplXCIsR2VuZXJpY0NvbGxlY3Rpb24uX3NpemVQcm9wZXJ0eURlc2NyaXB0b3IpO1xuTHJ1TWFwLmZyb20gPSBHZW5lcmljQ29sbGVjdGlvbi5mcm9tO1xuXG5McnVNYXAucHJvdG90eXBlLmNvbnN0cnVjdENsb25lID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcihcbiAgICAgICAgdmFsdWVzLFxuICAgICAgICB0aGlzLm1heExlbmd0aCxcbiAgICAgICAgdGhpcy5jb250ZW50RXF1YWxzLFxuICAgICAgICB0aGlzLmNvbnRlbnRIYXNoLFxuICAgICAgICB0aGlzLmdldERlZmF1bHRcbiAgICApO1xufTtcblxuTHJ1TWFwLnByb3RvdHlwZS5sb2cgPSBmdW5jdGlvbiAoY2hhcm1hcCwgc3RyaW5naWZ5KSB7XG4gICAgc3RyaW5naWZ5ID0gc3RyaW5naWZ5IHx8IHRoaXMuc3RyaW5naWZ5O1xuICAgIHRoaXMuc3RvcmUubG9nKGNoYXJtYXAsIHN0cmluZ2lmeSk7XG59O1xuXG5McnVNYXAucHJvdG90eXBlLnN0cmluZ2lmeSA9IGZ1bmN0aW9uIChpdGVtLCBsZWFkZXIpIHtcbiAgICByZXR1cm4gbGVhZGVyICsgSlNPTi5zdHJpbmdpZnkoaXRlbS5rZXkpICsgXCI6IFwiICsgSlNPTi5zdHJpbmdpZnkoaXRlbS52YWx1ZSk7XG59O1xuXG5McnVNYXAucHJvdG90eXBlLmFkZE1hcENoYW5nZUxpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5kaXNwYXRjaGVzTWFwQ2hhbmdlcykge1xuICAgICAgICAvLyBEZXRlY3QgTFJVIGRlbGV0aW9ucyBpbiB0aGUgTHJ1U2V0IGFuZCBlbWl0IGFzIE1hcENoYW5nZXMuXG4gICAgICAgIC8vIEFycmF5IGFuZCBIZWFwIGhhdmUgbm8gc3RvcmUuXG4gICAgICAgIC8vIERpY3QgYW5kIEZhc3RNYXAgZGVmaW5lIG5vIGxpc3RlbmVycyBvbiB0aGVpciBzdG9yZS5cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLnN0b3JlLmFkZEJlZm9yZVJhbmdlQ2hhbmdlTGlzdGVuZXIoZnVuY3Rpb24ocGx1cywgbWludXMpIHtcbiAgICAgICAgICAgIGlmIChwbHVzLmxlbmd0aCAmJiBtaW51cy5sZW5ndGgpIHsgIC8vIExSVSBpdGVtIHBydW5lZFxuICAgICAgICAgICAgICAgIHNlbGYuZGlzcGF0Y2hCZWZvcmVNYXBDaGFuZ2UobWludXNbMF0ua2V5LCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zdG9yZS5hZGRSYW5nZUNoYW5nZUxpc3RlbmVyKGZ1bmN0aW9uKHBsdXMsIG1pbnVzKSB7XG4gICAgICAgICAgICBpZiAocGx1cy5sZW5ndGggJiYgbWludXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5kaXNwYXRjaE1hcENoYW5nZShtaW51c1swXS5rZXksIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBNYXBDaGFuZ2VzLnByb3RvdHlwZS5hZGRNYXBDaGFuZ2VMaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbiJdfQ==