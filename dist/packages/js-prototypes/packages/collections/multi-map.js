"use strict";
var Map = require("./map").Map;
module.exports = MultiMap;
function MultiMap(values, bucket, equals, hash) {
    if (!(this instanceof MultiMap)) {
        return new MultiMap(values, bucket, equals, hash);
    }
    this.bucket = bucket || this.bucket;
    new (Function.prototype.bind.call(Map, this, values, equals, hash, function getDefault(key) {
        var bucket = this.bucket(key);
        Map.prototype.set.call(this, key, bucket);
        return bucket;
    }));
}
MultiMap.MultiMap = MultiMap; // hack so require("multi-map").MultiMap will work in MontageJS
MultiMap.prototype = Object.create(Map.prototype);
MultiMap.prototype.constructor = MultiMap;
MultiMap.prototype.constructClone = function (values) {
    return new this.constructor(values, this.bucket, this.contentEquals, this.contentHash);
};
MultiMap.prototype.set = function (key, newValues) {
    var values = this.get(key);
    values.swap(0, values.length, newValues);
};
MultiMap.prototype.bucket = function (key) {
    return [];
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktbWFwLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9qcy1wcm90b3R5cGVzL3BhY2thZ2VzL2NvbGxlY3Rpb25zL211bHRpLW1hcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDO0FBRy9CLE1BQU0sQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDO0FBQzFCLFNBQVMsUUFBUSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUk7SUFDMUMsSUFBSSxDQUFDLENBQUMsSUFBSSxZQUFZLFFBQVEsQ0FBQyxFQUFFO1FBQzdCLE9BQU8sSUFBSSxRQUFRLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDckQ7SUFDRCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3BDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLFVBQVUsQ0FBQyxHQUFHO1FBQ3RGLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDMUMsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNSLENBQUM7QUFFRCxRQUFRLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxDQUFDLCtEQUErRDtBQUU3RixRQUFRLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRWxELFFBQVEsQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLFFBQVEsQ0FBQztBQUUxQyxRQUFRLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBRyxVQUFVLE1BQU07SUFDaEQsT0FBTyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQ3ZCLE1BQU0sRUFDTixJQUFJLENBQUMsTUFBTSxFQUNYLElBQUksQ0FBQyxhQUFhLEVBQ2xCLElBQUksQ0FBQyxXQUFXLENBQ25CLENBQUM7QUFDTixDQUFDLENBQUM7QUFFRixRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxVQUFVLEdBQUcsRUFBRSxTQUFTO0lBQzdDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztBQUM3QyxDQUFDLENBQUM7QUFFRixRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxVQUFVLEdBQUc7SUFDckMsT0FBTyxFQUFFLENBQUM7QUFDZCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIE1hcCA9IHJlcXVpcmUoXCIuL21hcFwiKS5NYXA7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBNdWx0aU1hcDtcbmZ1bmN0aW9uIE11bHRpTWFwKHZhbHVlcywgYnVja2V0LCBlcXVhbHMsIGhhc2gpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTXVsdGlNYXApKSB7XG4gICAgICAgIHJldHVybiBuZXcgTXVsdGlNYXAodmFsdWVzLCBidWNrZXQsIGVxdWFscywgaGFzaCk7XG4gICAgfVxuICAgIHRoaXMuYnVja2V0ID0gYnVja2V0IHx8IHRoaXMuYnVja2V0O1xuICAgIG5ldyAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuY2FsbChNYXAsIHRoaXMsIHZhbHVlcywgZXF1YWxzLCBoYXNoLCBmdW5jdGlvbiBnZXREZWZhdWx0KGtleSkge1xuICAgICAgICB2YXIgYnVja2V0ID0gdGhpcy5idWNrZXQoa2V5KTtcbiAgICAgICAgTWFwLnByb3RvdHlwZS5zZXQuY2FsbCh0aGlzLCBrZXksIGJ1Y2tldCk7XG4gICAgICAgIHJldHVybiBidWNrZXQ7XG4gICAgfSkpO1xufVxuXG5NdWx0aU1hcC5NdWx0aU1hcCA9IE11bHRpTWFwOyAvLyBoYWNrIHNvIHJlcXVpcmUoXCJtdWx0aS1tYXBcIikuTXVsdGlNYXAgd2lsbCB3b3JrIGluIE1vbnRhZ2VKU1xuXG5NdWx0aU1hcC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1hcC5wcm90b3R5cGUpO1xuXG5NdWx0aU1hcC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNdWx0aU1hcDtcblxuTXVsdGlNYXAucHJvdG90eXBlLmNvbnN0cnVjdENsb25lID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcihcbiAgICAgICAgdmFsdWVzLFxuICAgICAgICB0aGlzLmJ1Y2tldCxcbiAgICAgICAgdGhpcy5jb250ZW50RXF1YWxzLFxuICAgICAgICB0aGlzLmNvbnRlbnRIYXNoXG4gICAgKTtcbn07XG5cbk11bHRpTWFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCBuZXdWYWx1ZXMpIHtcbiAgICB2YXIgdmFsdWVzID0gdGhpcy5nZXQoa2V5KTtcbiAgICB2YWx1ZXMuc3dhcCgwLCB2YWx1ZXMubGVuZ3RoLCBuZXdWYWx1ZXMpO1xufTtcblxuTXVsdGlNYXAucHJvdG90eXBlLmJ1Y2tldCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gW107XG59O1xuIl19