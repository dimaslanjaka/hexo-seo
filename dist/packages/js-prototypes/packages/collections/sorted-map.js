"use strict";
var Shim = require("./shim");
var SortedSet = require("./sorted-set");
var GenericCollection = require("./generic-collection");
var GenericMap = require("./generic-map");
var PropertyChanges = require("./listen/property-changes");
var MapChanges = require("./listen/map-changes");
module.exports = SortedMap;
function SortedMap(values, equals, compare, getDefault) {
    if (!(this instanceof SortedMap)) {
        return new SortedMap(values, equals, compare, getDefault);
    }
    equals = equals || Object.equals;
    compare = compare || Object.compare;
    getDefault = getDefault || Function.noop;
    this.contentEquals = equals;
    this.contentCompare = compare;
    this.getDefault = getDefault;
    this.store = new SortedSet(null, function keysEqual(a, b) {
        return equals(a.key, b.key);
    }, function compareKeys(a, b) {
        return compare(a.key, b.key);
    });
    this.length = 0;
    this.addEach(values);
}
// hack so require("sorted-map").SortedMap will work in MontageJS
SortedMap.SortedMap = SortedMap;
SortedMap.from = GenericCollection.from;
Object.addEach(SortedMap.prototype, GenericCollection.prototype);
Object.addEach(SortedMap.prototype, GenericMap.prototype);
Object.addEach(SortedMap.prototype, PropertyChanges.prototype);
Object.addEach(SortedMap.prototype, MapChanges.prototype);
Object.defineProperty(SortedMap.prototype, "size", GenericCollection._sizePropertyDescriptor);
SortedMap.prototype.constructClone = function (values) {
    return new this.constructor(values, this.contentEquals, this.contentCompare, this.getDefault);
};
SortedMap.prototype.iterate = function () {
    return this.store.iterate();
};
SortedMap.prototype.log = function (charmap, logNode, callback, thisp) {
    logNode = logNode || this.logNode;
    this.store.log(charmap, function (node, log, logBefore) {
        logNode(node.value, log, logBefore);
    }, callback, thisp);
};
SortedMap.prototype.logNode = function (node, log) {
    log(" key: " + node.key);
    log(" value: " + node.value);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydGVkLW1hcC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvanMtcHJvdG90eXBlcy9wYWNrYWdlcy9jb2xsZWN0aW9ucy9zb3J0ZWQtbWFwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM3QixJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDeEMsSUFBSSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUN4RCxJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDMUMsSUFBSSxlQUFlLEdBQUcsT0FBTyxDQUFDLDJCQUEyQixDQUFDLENBQUM7QUFDM0QsSUFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFFakQsTUFBTSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUM7QUFFM0IsU0FBUyxTQUFTLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsVUFBVTtJQUNsRCxJQUFJLENBQUMsQ0FBQyxJQUFJLFlBQVksU0FBUyxDQUFDLEVBQUU7UUFDOUIsT0FBTyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztLQUM3RDtJQUNELE1BQU0sR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNqQyxPQUFPLEdBQUcsT0FBTyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFDcEMsVUFBVSxHQUFHLFVBQVUsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDO0lBQ3pDLElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDO0lBQzVCLElBQUksQ0FBQyxjQUFjLEdBQUcsT0FBTyxDQUFDO0lBQzlCLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0lBQzdCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxTQUFTLENBQ3RCLElBQUksRUFDSixTQUFTLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNuQixPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoQyxDQUFDLEVBQ0QsU0FBUyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDckIsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakMsQ0FBQyxDQUNKLENBQUM7SUFDRixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3pCLENBQUM7QUFFRCxpRUFBaUU7QUFDakUsU0FBUyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7QUFFaEMsU0FBUyxDQUFDLElBQUksR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7QUFFeEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2pFLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDMUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvRCxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzFELE1BQU0sQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBQyxNQUFNLEVBQUMsaUJBQWlCLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUU1RixTQUFTLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBRyxVQUFVLE1BQU07SUFDakQsT0FBTyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQ3ZCLE1BQU0sRUFDTixJQUFJLENBQUMsYUFBYSxFQUNsQixJQUFJLENBQUMsY0FBYyxFQUNuQixJQUFJLENBQUMsVUFBVSxDQUNsQixDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBQ0YsU0FBUyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUc7SUFDMUIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ2hDLENBQUMsQ0FBQztBQUVGLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLFVBQVUsT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsS0FBSztJQUNqRSxPQUFPLEdBQUcsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUE7SUFDakMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFVBQVUsSUFBSSxFQUFFLEdBQUcsRUFBRSxTQUFTO1FBQ2xELE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN4QyxDQUFDLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3hCLENBQUMsQ0FBQztBQUVGLFNBQVMsQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFHLFVBQVUsSUFBSSxFQUFFLEdBQUc7SUFDN0MsR0FBRyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDekIsR0FBRyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDakMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBTaGltID0gcmVxdWlyZShcIi4vc2hpbVwiKTtcbnZhciBTb3J0ZWRTZXQgPSByZXF1aXJlKFwiLi9zb3J0ZWQtc2V0XCIpO1xudmFyIEdlbmVyaWNDb2xsZWN0aW9uID0gcmVxdWlyZShcIi4vZ2VuZXJpYy1jb2xsZWN0aW9uXCIpO1xudmFyIEdlbmVyaWNNYXAgPSByZXF1aXJlKFwiLi9nZW5lcmljLW1hcFwiKTtcbnZhciBQcm9wZXJ0eUNoYW5nZXMgPSByZXF1aXJlKFwiLi9saXN0ZW4vcHJvcGVydHktY2hhbmdlc1wiKTtcbnZhciBNYXBDaGFuZ2VzID0gcmVxdWlyZShcIi4vbGlzdGVuL21hcC1jaGFuZ2VzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNvcnRlZE1hcDtcblxuZnVuY3Rpb24gU29ydGVkTWFwKHZhbHVlcywgZXF1YWxzLCBjb21wYXJlLCBnZXREZWZhdWx0KSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNvcnRlZE1hcCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTb3J0ZWRNYXAodmFsdWVzLCBlcXVhbHMsIGNvbXBhcmUsIGdldERlZmF1bHQpO1xuICAgIH1cbiAgICBlcXVhbHMgPSBlcXVhbHMgfHwgT2JqZWN0LmVxdWFscztcbiAgICBjb21wYXJlID0gY29tcGFyZSB8fCBPYmplY3QuY29tcGFyZTtcbiAgICBnZXREZWZhdWx0ID0gZ2V0RGVmYXVsdCB8fCBGdW5jdGlvbi5ub29wO1xuICAgIHRoaXMuY29udGVudEVxdWFscyA9IGVxdWFscztcbiAgICB0aGlzLmNvbnRlbnRDb21wYXJlID0gY29tcGFyZTtcbiAgICB0aGlzLmdldERlZmF1bHQgPSBnZXREZWZhdWx0O1xuICAgIHRoaXMuc3RvcmUgPSBuZXcgU29ydGVkU2V0KFxuICAgICAgICBudWxsLFxuICAgICAgICBmdW5jdGlvbiBrZXlzRXF1YWwoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGVxdWFscyhhLmtleSwgYi5rZXkpO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiBjb21wYXJlS2V5cyhhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tcGFyZShhLmtleSwgYi5rZXkpO1xuICAgICAgICB9XG4gICAgKTtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5hZGRFYWNoKHZhbHVlcyk7XG59XG5cbi8vIGhhY2sgc28gcmVxdWlyZShcInNvcnRlZC1tYXBcIikuU29ydGVkTWFwIHdpbGwgd29yayBpbiBNb250YWdlSlNcblNvcnRlZE1hcC5Tb3J0ZWRNYXAgPSBTb3J0ZWRNYXA7XG5cblNvcnRlZE1hcC5mcm9tID0gR2VuZXJpY0NvbGxlY3Rpb24uZnJvbTtcblxuT2JqZWN0LmFkZEVhY2goU29ydGVkTWFwLnByb3RvdHlwZSwgR2VuZXJpY0NvbGxlY3Rpb24ucHJvdG90eXBlKTtcbk9iamVjdC5hZGRFYWNoKFNvcnRlZE1hcC5wcm90b3R5cGUsIEdlbmVyaWNNYXAucHJvdG90eXBlKTtcbk9iamVjdC5hZGRFYWNoKFNvcnRlZE1hcC5wcm90b3R5cGUsIFByb3BlcnR5Q2hhbmdlcy5wcm90b3R5cGUpO1xuT2JqZWN0LmFkZEVhY2goU29ydGVkTWFwLnByb3RvdHlwZSwgTWFwQ2hhbmdlcy5wcm90b3R5cGUpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNvcnRlZE1hcC5wcm90b3R5cGUsXCJzaXplXCIsR2VuZXJpY0NvbGxlY3Rpb24uX3NpemVQcm9wZXJ0eURlc2NyaXB0b3IpO1xuXG5Tb3J0ZWRNYXAucHJvdG90eXBlLmNvbnN0cnVjdENsb25lID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcihcbiAgICAgICAgdmFsdWVzLFxuICAgICAgICB0aGlzLmNvbnRlbnRFcXVhbHMsXG4gICAgICAgIHRoaXMuY29udGVudENvbXBhcmUsXG4gICAgICAgIHRoaXMuZ2V0RGVmYXVsdFxuICAgICk7XG59O1xuU29ydGVkTWFwLnByb3RvdHlwZS5pdGVyYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnN0b3JlLml0ZXJhdGUoKTtcbn07XG5cblNvcnRlZE1hcC5wcm90b3R5cGUubG9nID0gZnVuY3Rpb24gKGNoYXJtYXAsIGxvZ05vZGUsIGNhbGxiYWNrLCB0aGlzcCkge1xuICAgIGxvZ05vZGUgPSBsb2dOb2RlIHx8IHRoaXMubG9nTm9kZVxuICAgIHRoaXMuc3RvcmUubG9nKGNoYXJtYXAsIGZ1bmN0aW9uIChub2RlLCBsb2csIGxvZ0JlZm9yZSkge1xuICAgICAgICBsb2dOb2RlKG5vZGUudmFsdWUsIGxvZywgbG9nQmVmb3JlKTtcbiAgICB9LCBjYWxsYmFjaywgdGhpc3ApO1xufTtcblxuU29ydGVkTWFwLnByb3RvdHlwZS5sb2dOb2RlID0gZnVuY3Rpb24gKG5vZGUsIGxvZykge1xuICAgIGxvZyhcIiBrZXk6IFwiICsgbm9kZS5rZXkpO1xuICAgIGxvZyhcIiB2YWx1ZTogXCIgKyBub2RlLnZhbHVlKTtcbn07XG4iXX0=