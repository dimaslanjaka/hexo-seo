"use strict";
module.exports = SortedArraySet;
var Shim = require("./shim");
var SortedArray = require("./sorted-array");
var GenericSet = require("./generic-set");
var PropertyChanges = require("./listen/property-changes");
function SortedArraySet(values, equals, compare, getDefault) {
    if (!(this instanceof SortedArraySet)) {
        return new SortedArraySet(values, equals, compare, getDefault);
    }
    SortedArray.call(this, values, equals, compare, getDefault);
}
// hack so require("sorted-array-set".SortedArraySet works in MontageJS
SortedArraySet.SortedArraySet = SortedArraySet;
SortedArraySet.prototype = Object.create(SortedArray.prototype);
SortedArraySet.prototype.constructor = SortedArraySet;
Object.addEach(SortedArraySet.prototype, GenericSet.prototype);
Object.addEach(SortedArraySet.prototype, PropertyChanges.prototype);
SortedArraySet.from = SortedArray.from;
SortedArraySet.prototype.isSorted = true;
SortedArraySet.prototype.add = function (value) {
    if (!this.has(value)) {
        SortedArray.prototype.add.call(this, value);
        return true;
    }
    else {
        return false;
    }
};
SortedArraySet.prototype.reduce = function (callback, basis /*, thisp*/) {
    var self = this;
    var thisp = arguments[2];
    return this.array.reduce(function (basis, value, index) {
        return callback.call(thisp, basis, value, index, self);
    }, basis);
};
SortedArraySet.prototype.reduceRight = function (callback, basis /*, thisp*/) {
    var self = this;
    var thisp = arguments[2];
    return this.array.reduceRight(function (basis, value, index) {
        return callback.call(thisp, basis, value, index, self);
    }, basis);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydGVkLWFycmF5LXNldC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvanMtcHJvdG90eXBlcy9wYWNrYWdlcy9jb2xsZWN0aW9ucy9zb3J0ZWQtYXJyYXktc2V0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLE1BQU0sQ0FBQyxPQUFPLEdBQUcsY0FBYyxDQUFDO0FBRWhDLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM3QixJQUFJLFdBQVcsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUM1QyxJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDMUMsSUFBSSxlQUFlLEdBQUcsT0FBTyxDQUFDLDJCQUEyQixDQUFDLENBQUM7QUFFM0QsU0FBUyxjQUFjLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsVUFBVTtJQUN2RCxJQUFJLENBQUMsQ0FBQyxJQUFJLFlBQVksY0FBYyxDQUFDLEVBQUU7UUFDbkMsT0FBTyxJQUFJLGNBQWMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztLQUNsRTtJQUNELFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ2hFLENBQUM7QUFFRCx1RUFBdUU7QUFDdkUsY0FBYyxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7QUFFL0MsY0FBYyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUVoRSxjQUFjLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxjQUFjLENBQUM7QUFFdEQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvRCxNQUFNLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRXBFLGNBQWMsQ0FBQyxJQUFJLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQztBQUV2QyxjQUFjLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7QUFFekMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUcsVUFBVSxLQUFLO0lBQzFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ2xCLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDNUMsT0FBTyxJQUFJLENBQUM7S0FDZjtTQUFNO1FBQ0gsT0FBTyxLQUFLLENBQUM7S0FDaEI7QUFDTCxDQUFDLENBQUM7QUFFRixjQUFjLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxVQUFVLFFBQVEsRUFBRSxLQUFLLENBQUMsV0FBVztJQUNuRSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7SUFDaEIsSUFBSSxLQUFLLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUs7UUFDbEQsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMzRCxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDZCxDQUFDLENBQUM7QUFFRixjQUFjLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxVQUFVLFFBQVEsRUFBRSxLQUFLLENBQUMsV0FBVztJQUN4RSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7SUFDaEIsSUFBSSxLQUFLLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsVUFBVSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUs7UUFDdkQsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMzRCxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDZCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBTb3J0ZWRBcnJheVNldDtcblxudmFyIFNoaW0gPSByZXF1aXJlKFwiLi9zaGltXCIpO1xudmFyIFNvcnRlZEFycmF5ID0gcmVxdWlyZShcIi4vc29ydGVkLWFycmF5XCIpO1xudmFyIEdlbmVyaWNTZXQgPSByZXF1aXJlKFwiLi9nZW5lcmljLXNldFwiKTtcbnZhciBQcm9wZXJ0eUNoYW5nZXMgPSByZXF1aXJlKFwiLi9saXN0ZW4vcHJvcGVydHktY2hhbmdlc1wiKTtcblxuZnVuY3Rpb24gU29ydGVkQXJyYXlTZXQodmFsdWVzLCBlcXVhbHMsIGNvbXBhcmUsIGdldERlZmF1bHQpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU29ydGVkQXJyYXlTZXQpKSB7XG4gICAgICAgIHJldHVybiBuZXcgU29ydGVkQXJyYXlTZXQodmFsdWVzLCBlcXVhbHMsIGNvbXBhcmUsIGdldERlZmF1bHQpO1xuICAgIH1cbiAgICBTb3J0ZWRBcnJheS5jYWxsKHRoaXMsIHZhbHVlcywgZXF1YWxzLCBjb21wYXJlLCBnZXREZWZhdWx0KTtcbn1cblxuLy8gaGFjayBzbyByZXF1aXJlKFwic29ydGVkLWFycmF5LXNldFwiLlNvcnRlZEFycmF5U2V0IHdvcmtzIGluIE1vbnRhZ2VKU1xuU29ydGVkQXJyYXlTZXQuU29ydGVkQXJyYXlTZXQgPSBTb3J0ZWRBcnJheVNldDtcblxuU29ydGVkQXJyYXlTZXQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTb3J0ZWRBcnJheS5wcm90b3R5cGUpO1xuXG5Tb3J0ZWRBcnJheVNldC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTb3J0ZWRBcnJheVNldDtcblxuT2JqZWN0LmFkZEVhY2goU29ydGVkQXJyYXlTZXQucHJvdG90eXBlLCBHZW5lcmljU2V0LnByb3RvdHlwZSk7XG5PYmplY3QuYWRkRWFjaChTb3J0ZWRBcnJheVNldC5wcm90b3R5cGUsIFByb3BlcnR5Q2hhbmdlcy5wcm90b3R5cGUpO1xuXG5Tb3J0ZWRBcnJheVNldC5mcm9tID0gU29ydGVkQXJyYXkuZnJvbTtcblxuU29ydGVkQXJyYXlTZXQucHJvdG90eXBlLmlzU29ydGVkID0gdHJ1ZTtcblxuU29ydGVkQXJyYXlTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmICghdGhpcy5oYXModmFsdWUpKSB7XG4gICAgICAgIFNvcnRlZEFycmF5LnByb3RvdHlwZS5hZGQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59O1xuXG5Tb3J0ZWRBcnJheVNldC5wcm90b3R5cGUucmVkdWNlID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBiYXNpcyAvKiwgdGhpc3AqLykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgdGhpc3AgPSBhcmd1bWVudHNbMl07XG4gICAgcmV0dXJuIHRoaXMuYXJyYXkucmVkdWNlKGZ1bmN0aW9uIChiYXNpcywgdmFsdWUsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKHRoaXNwLCBiYXNpcywgdmFsdWUsIGluZGV4LCBzZWxmKTtcbiAgICB9LCBiYXNpcyk7XG59O1xuXG5Tb3J0ZWRBcnJheVNldC5wcm90b3R5cGUucmVkdWNlUmlnaHQgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGJhc2lzIC8qLCB0aGlzcCovKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciB0aGlzcCA9IGFyZ3VtZW50c1syXTtcbiAgICByZXR1cm4gdGhpcy5hcnJheS5yZWR1Y2VSaWdodChmdW5jdGlvbiAoYmFzaXMsIHZhbHVlLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2suY2FsbCh0aGlzcCwgYmFzaXMsIHZhbHVlLCBpbmRleCwgc2VsZik7XG4gICAgfSwgYmFzaXMpO1xufTtcbiJdfQ==