"use strict";
var Shim = require("./shim");
var SortedArraySet = require("./sorted-array-set");
var GenericCollection = require("./generic-collection");
var GenericMap = require("./generic-map");
var PropertyChanges = require("./listen/property-changes");
var MapChanges = require("./listen/map-changes");
module.exports = SortedArrayMap;
function SortedArrayMap(values, equals, compare, getDefault) {
    if (!(this instanceof SortedArrayMap)) {
        return new SortedArrayMap(values, equals, compare, getDefault);
    }
    equals = equals || Object.equals;
    compare = compare || Object.compare;
    getDefault = getDefault || Function.noop;
    this.contentEquals = equals;
    this.contentCompare = compare;
    this.getDefault = getDefault;
    this.store = new SortedArraySet(null, function keysEqual(a, b) {
        return equals(a.key, b.key);
    }, function compareKeys(a, b) {
        return compare(a.key, b.key);
    });
    this.length = 0;
    this.addEach(values);
}
// hack so require("sorted-array-map").SortedArrayMap will work in MontageJS
SortedArrayMap.SortedArrayMap = SortedArrayMap;
Object.addEach(SortedArrayMap.prototype, GenericCollection.prototype);
Object.addEach(SortedArrayMap.prototype, GenericMap.prototype);
Object.addEach(SortedArrayMap.prototype, PropertyChanges.prototype);
Object.addEach(SortedArrayMap.prototype, MapChanges.prototype);
SortedArrayMap.from = GenericCollection.from;
SortedArrayMap.prototype.isSorted = true;
SortedArrayMap.prototype.constructClone = function (values) {
    return new this.constructor(values, this.contentEquals, this.contentCompare, this.getDefault);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydGVkLWFycmF5LW1hcC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvanMtcHJvdG90eXBlcy9wYWNrYWdlcy9jb2xsZWN0aW9ucy9zb3J0ZWQtYXJyYXktbWFwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM3QixJQUFJLGNBQWMsR0FBRyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUNuRCxJQUFJLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ3hELElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUMxQyxJQUFJLGVBQWUsR0FBRyxPQUFPLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUMzRCxJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUVqRCxNQUFNLENBQUMsT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUVoQyxTQUFTLGNBQWMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxVQUFVO0lBQ3ZELElBQUksQ0FBQyxDQUFDLElBQUksWUFBWSxjQUFjLENBQUMsRUFBRTtRQUNuQyxPQUFPLElBQUksY0FBYyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0tBQ2xFO0lBQ0QsTUFBTSxHQUFHLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2pDLE9BQU8sR0FBRyxPQUFPLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUNwQyxVQUFVLEdBQUcsVUFBVSxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUM7SUFDekMsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUM7SUFDNUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxPQUFPLENBQUM7SUFDOUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDN0IsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLGNBQWMsQ0FDM0IsSUFBSSxFQUNKLFNBQVMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ25CLE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLENBQUMsRUFDRCxTQUFTLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNyQixPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNqQyxDQUFDLENBQ0osQ0FBQztJQUNGLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDekIsQ0FBQztBQUVELDRFQUE0RTtBQUM1RSxjQUFjLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztBQUUvQyxNQUFNLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDdEUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvRCxNQUFNLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3BFLE1BQU0sQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFL0QsY0FBYyxDQUFDLElBQUksR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7QUFFN0MsY0FBYyxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0FBRXpDLGNBQWMsQ0FBQyxTQUFTLENBQUMsY0FBYyxHQUFHLFVBQVUsTUFBTTtJQUN0RCxPQUFPLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FDdkIsTUFBTSxFQUNOLElBQUksQ0FBQyxhQUFhLEVBQ2xCLElBQUksQ0FBQyxjQUFjLEVBQ25CLElBQUksQ0FBQyxVQUFVLENBQ2xCLENBQUM7QUFDTixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIFNoaW0gPSByZXF1aXJlKFwiLi9zaGltXCIpO1xudmFyIFNvcnRlZEFycmF5U2V0ID0gcmVxdWlyZShcIi4vc29ydGVkLWFycmF5LXNldFwiKTtcbnZhciBHZW5lcmljQ29sbGVjdGlvbiA9IHJlcXVpcmUoXCIuL2dlbmVyaWMtY29sbGVjdGlvblwiKTtcbnZhciBHZW5lcmljTWFwID0gcmVxdWlyZShcIi4vZ2VuZXJpYy1tYXBcIik7XG52YXIgUHJvcGVydHlDaGFuZ2VzID0gcmVxdWlyZShcIi4vbGlzdGVuL3Byb3BlcnR5LWNoYW5nZXNcIik7XG52YXIgTWFwQ2hhbmdlcyA9IHJlcXVpcmUoXCIuL2xpc3Rlbi9tYXAtY2hhbmdlc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTb3J0ZWRBcnJheU1hcDtcblxuZnVuY3Rpb24gU29ydGVkQXJyYXlNYXAodmFsdWVzLCBlcXVhbHMsIGNvbXBhcmUsIGdldERlZmF1bHQpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU29ydGVkQXJyYXlNYXApKSB7XG4gICAgICAgIHJldHVybiBuZXcgU29ydGVkQXJyYXlNYXAodmFsdWVzLCBlcXVhbHMsIGNvbXBhcmUsIGdldERlZmF1bHQpO1xuICAgIH1cbiAgICBlcXVhbHMgPSBlcXVhbHMgfHwgT2JqZWN0LmVxdWFscztcbiAgICBjb21wYXJlID0gY29tcGFyZSB8fCBPYmplY3QuY29tcGFyZTtcbiAgICBnZXREZWZhdWx0ID0gZ2V0RGVmYXVsdCB8fCBGdW5jdGlvbi5ub29wO1xuICAgIHRoaXMuY29udGVudEVxdWFscyA9IGVxdWFscztcbiAgICB0aGlzLmNvbnRlbnRDb21wYXJlID0gY29tcGFyZTtcbiAgICB0aGlzLmdldERlZmF1bHQgPSBnZXREZWZhdWx0O1xuICAgIHRoaXMuc3RvcmUgPSBuZXcgU29ydGVkQXJyYXlTZXQoXG4gICAgICAgIG51bGwsXG4gICAgICAgIGZ1bmN0aW9uIGtleXNFcXVhbChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gZXF1YWxzKGEua2V5LCBiLmtleSk7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIGNvbXBhcmVLZXlzKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBjb21wYXJlKGEua2V5LCBiLmtleSk7XG4gICAgICAgIH1cbiAgICApO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICB0aGlzLmFkZEVhY2godmFsdWVzKTtcbn1cblxuLy8gaGFjayBzbyByZXF1aXJlKFwic29ydGVkLWFycmF5LW1hcFwiKS5Tb3J0ZWRBcnJheU1hcCB3aWxsIHdvcmsgaW4gTW9udGFnZUpTXG5Tb3J0ZWRBcnJheU1hcC5Tb3J0ZWRBcnJheU1hcCA9IFNvcnRlZEFycmF5TWFwO1xuXG5PYmplY3QuYWRkRWFjaChTb3J0ZWRBcnJheU1hcC5wcm90b3R5cGUsIEdlbmVyaWNDb2xsZWN0aW9uLnByb3RvdHlwZSk7XG5PYmplY3QuYWRkRWFjaChTb3J0ZWRBcnJheU1hcC5wcm90b3R5cGUsIEdlbmVyaWNNYXAucHJvdG90eXBlKTtcbk9iamVjdC5hZGRFYWNoKFNvcnRlZEFycmF5TWFwLnByb3RvdHlwZSwgUHJvcGVydHlDaGFuZ2VzLnByb3RvdHlwZSk7XG5PYmplY3QuYWRkRWFjaChTb3J0ZWRBcnJheU1hcC5wcm90b3R5cGUsIE1hcENoYW5nZXMucHJvdG90eXBlKTtcblxuU29ydGVkQXJyYXlNYXAuZnJvbSA9IEdlbmVyaWNDb2xsZWN0aW9uLmZyb207XG5cblNvcnRlZEFycmF5TWFwLnByb3RvdHlwZS5pc1NvcnRlZCA9IHRydWU7XG5cblNvcnRlZEFycmF5TWFwLnByb3RvdHlwZS5jb25zdHJ1Y3RDbG9uZSA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoXG4gICAgICAgIHZhbHVlcyxcbiAgICAgICAgdGhpcy5jb250ZW50RXF1YWxzLFxuICAgICAgICB0aGlzLmNvbnRlbnRDb21wYXJlLFxuICAgICAgICB0aGlzLmdldERlZmF1bHRcbiAgICApO1xufTtcbiJdfQ==