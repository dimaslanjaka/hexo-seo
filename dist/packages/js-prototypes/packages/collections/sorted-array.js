"use strict";
module.exports = SortedArray;
var Shim = require("./shim");
var GenericCollection = require("./generic-collection");
var PropertyChanges = require("./listen/property-changes");
var RangeChanges = require("./listen/range-changes");
function SortedArray(values, equals, compare, getDefault) {
    if (!(this instanceof SortedArray)) {
        return new SortedArray(values, equals, compare, getDefault);
    }
    if (Array.isArray(values)) {
        this.array = values;
        values = values.splice(0, values.length);
    }
    else {
        this.array = [];
    }
    this.contentEquals = equals || Object.equals;
    this.contentCompare = compare || Object.compare;
    this.getDefault = getDefault || Function.noop;
    this.length = 0;
    this.addEach(values);
}
// hack so require("sorted-array").SortedArray will work in MontageJS
SortedArray.SortedArray = SortedArray;
SortedArray.from = GenericCollection.from;
Object.addEach(SortedArray.prototype, GenericCollection.prototype);
Object.addEach(SortedArray.prototype, PropertyChanges.prototype);
Object.addEach(SortedArray.prototype, RangeChanges.prototype);
SortedArray.prototype.isSorted = true;
function search(array, value, compare) {
    var first = 0;
    var last = array.length - 1;
    while (first <= last) {
        var middle = (first + last) >> 1; // Math.floor( / 2)
        var comparison = compare(value, array[middle]);
        if (comparison > 0) {
            first = middle + 1;
        }
        else if (comparison < 0) {
            last = middle - 1;
        }
        else {
            return middle;
        }
    }
    return -(first + 1);
}
function determineIncomparableRange(index, array, value, compare, equals) {
    // Return the inclusive start and end indices of the incomparable streak containing value.
    var start = index;
    var end = index;
    while (start > 0 && compare(value, array[start - 1]) === 0) {
        start--;
    }
    while (end < array.length - 1 && compare(value, array[end + 1]) === 0) {
        end++;
    }
    return { start: start, end: end };
}
function searchFirst(array, value, compare, equals) {
    var index = search(array, value, compare);
    if (index < 0) {
        return -1;
    }
    else {
        var range = determineIncomparableRange(index, array, value, compare, equals);
        for (var i = range.start; i <= range.end; i++) {
            if (equals(value, array[i])) {
                return i;
            }
        }
        return -1;
    }
}
function searchLast(array, value, compare, equals) {
    var index = search(array, value, compare);
    if (index < 0) {
        return -1;
    }
    else {
        var range = determineIncomparableRange(index, array, value, compare, equals);
        for (var i = range.end; i >= range.start; i--) {
            if (equals(value, array[i])) {
                return i;
            }
        }
        return -1;
    }
}
function searchForInsertionIndex(array, value, compare) {
    var index = search(array, value, compare);
    if (index < 0) {
        return -index - 1;
    }
    else {
        var last = array.length - 1;
        while (index < last && compare(value, array[index + 1]) === 0) {
            index++;
        }
        return index;
    }
}
SortedArray.prototype.constructClone = function (values) {
    return new this.constructor(values, this.contentEquals, this.contentCompare, this.getDefault);
};
SortedArray.prototype.has = function (value, equals) {
    if (equals) {
        throw new Error("SortedSet#has does not support second argument: equals");
    }
    var index = searchFirst(this.array, value, this.contentCompare, this.contentEquals);
    return index !== -1;
};
SortedArray.prototype.get = function (value, equals) {
    if (equals) {
        throw new Error("SortedArray#get does not support second argument: equals");
    }
    var index = searchFirst(this.array, value, this.contentCompare, this.contentEquals);
    if (index !== -1) {
        return this.array[index];
    }
    else {
        return this.getDefault(value);
    }
};
SortedArray.prototype.add = function (value) {
    var index = searchForInsertionIndex(this.array, value, this.contentCompare);
    if (this.dispatchesRangeChanges) {
        this.dispatchBeforeRangeChange([value], Array.empty, index);
    }
    this.array.splice(index, 0, value);
    this.length++;
    if (this.dispatchesRangeChanges) {
        this.dispatchRangeChange([value], Array.empty, index);
    }
    return true;
};
SortedArray.prototype["delete"] = function (value, equals) {
    if (equals) {
        throw new Error("SortedArray#delete does not support second argument: equals");
    }
    var index = searchFirst(this.array, value, this.contentCompare, this.contentEquals);
    if (index !== -1) {
        if (this.dispatchesRangeChanges) {
            this.dispatchBeforeRangeChange(Array.empty, [value], index);
        }
        this.array.spliceOne(index);
        this.length--;
        if (this.dispatchesRangeChanges) {
            this.dispatchRangeChange(Array.empty, [value], index);
        }
        return true;
    }
    else {
        return false;
    }
};
SortedArray.prototype.deleteAll = function (value, equals) {
    if (equals) {
        var count = this.array.deleteAll(value, equals);
        this.length -= count;
        return count;
    }
    else {
        var start = searchFirst(this.array, value, this.contentCompare, this.contentEquals);
        if (start !== -1) {
            var end = start;
            while (this.contentEquals(value, this.array[end])) {
                end++;
            }
            var minus = this.slice(start, end);
            if (this.dispatchesRangeChanges) {
                this.dispatchBeforeRangeChange(Array.empty, minus, start);
            }
            this.array.splice(start, minus.length);
            this.length -= minus.length;
            if (this.dispatchesRangeChanges) {
                this.dispatchRangeChange(Array.empty, minus, start);
            }
            return minus.length;
        }
        else {
            return 0;
        }
    }
};
SortedArray.prototype.indexOf = function (value) {
    // TODO throw error if provided a start index
    return searchFirst(this.array, value, this.contentCompare, this.contentEquals);
};
SortedArray.prototype.lastIndexOf = function (value) {
    // TODO throw error if provided a start index
    return searchLast(this.array, value, this.contentCompare, this.contentEquals);
};
var deprecatedWarnNonce = {};
function deprecatedWarn(msg, notOnce) {
    if (typeof console !== 'undefined' &&
        typeof console.warn === 'function' &&
        (notOnce !== true && deprecatedWarnNonce.hasOwnProperty(msg) === false)) {
        console.warn(msg);
        deprecatedWarnNonce[msg]++;
    }
}
// TODO remove in v6 (not present in v2)
SortedArray.prototype.find = function (value, equals, index) {
    deprecatedWarn('This SortedArray#find usage is deprecated please use SortedArray#findValue');
    return this.findValue.apply(this, arguments);
};
SortedArray.prototype.findValue = function (value, equals, index) {
    // TODO throw error if provided a start index
    if (equals) {
        throw new Error("SortedArray#findValue does not support second argument: equals");
    }
    if (index) {
        throw new Error("SortedArray#findValue does not support third argument: index");
    }
    // TODO support initial partition index
    return searchFirst(this.array, value, this.contentCompare, this.contentEquals);
};
// TODO remove in v6 (not present in v2)
SortedArray.prototype.findLast = function (value, equals, index) {
    deprecatedWarn('This SortedArray#findLast usage is deprecated please use SortedArray#findLastValue');
    return this.findLastValue.apply(this, arguments);
};
SortedArray.prototype.findLastValue = function (value, equals, index) {
    if (equals) {
        throw new Error("SortedArray#findLastValue does not support second argument: equals");
    }
    if (index) {
        throw new Error("SortedArray#findLastValue does not support third argument: index");
    }
    // TODO support initial partition index
    return searchLast(this.array, value, this.contentCompare, this.contentEquals);
};
SortedArray.prototype.push = function () {
    this.addEach(arguments);
};
SortedArray.prototype.unshift = function () {
    this.addEach(arguments);
};
SortedArray.prototype.pop = function () {
    var val = this.array.pop();
    this.length = this.array.length;
    return val;
};
SortedArray.prototype.shift = function () {
    var val = this.array.shift();
    this.length = this.array.length;
    return val;
};
SortedArray.prototype.slice = function () {
    return this.array.slice.apply(this.array, arguments);
};
SortedArray.prototype.splice = function (index, length /*...plus*/) {
    return this.swap(index, length, Array.prototype.slice.call(arguments, 2));
};
SortedArray.prototype.swap = function (index, length, plus) {
    if (index === undefined && length === undefined) {
        return Array.empty;
    }
    index = index || 0;
    if (index < 0) {
        index += this.length;
    }
    if (length === undefined) {
        length = Infinity;
    }
    var minus = this.slice(index, index + length);
    if (this.dispatchesRangeChanges) {
        this.dispatchBeforeRangeChange(plus, minus, index);
    }
    this.array.splice(index, length);
    this.length -= minus.length;
    if (this.dispatchesRangeChanges) {
        this.dispatchRangeChange(Array.empty, minus, index);
    }
    this.addEach(plus);
    return minus;
};
SortedArray.prototype.reduce = function (callback, basis /*, thisp*/) {
    var thisp = arguments[2];
    return this.array.reduce(function (basis, value, key) {
        return callback.call(thisp, basis, value, key, this);
    }, basis, this);
};
SortedArray.prototype.reduceRight = function () {
    var thisp = arguments[2];
    return this.array.reduceRight(function (basis, value, key) {
        return callback.call(thisp, basis, value, key, this);
    }, basis, this);
};
SortedArray.prototype.min = function () {
    if (this.length) {
        return this.array[0];
    }
};
SortedArray.prototype.max = function () {
    if (this.length) {
        return this.array[this.length - 1];
    }
};
SortedArray.prototype.one = function () {
    return this.array.one();
};
SortedArray.prototype.clear = function () {
    var minus;
    if (this.dispatchesRangeChanges) {
        minus = this.array.slice();
        this.dispatchBeforeRangeChange(Array.empty, minus, 0);
    }
    this.length = 0;
    this.array.clear();
    if (this.dispatchesRangeChanges) {
        this.dispatchRangeChange(Array.empty, minus, 0);
    }
};
SortedArray.prototype.equals = function (that, equals) {
    return this.array.equals(that, equals);
};
SortedArray.prototype.compare = function (that, compare) {
    return this.array.compare(that, compare);
};
SortedArray.prototype.iterate = function (start, end) {
    return new this.Iterator(this.array, start, end);
};
SortedArray.prototype.toJSON = function () {
    return this.toArray();
};
SortedArray.prototype.Iterator = Array.prototype.Iterator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydGVkLWFycmF5LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9qcy1wcm90b3R5cGVzL3BhY2thZ2VzL2NvbGxlY3Rpb25zL3NvcnRlZC1hcnJheS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixNQUFNLENBQUMsT0FBTyxHQUFHLFdBQVcsQ0FBQztBQUU3QixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDN0IsSUFBSSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUN4RCxJQUFJLGVBQWUsR0FBRyxPQUFPLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUMzRCxJQUFJLFlBQVksR0FBRyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUVyRCxTQUFTLFdBQVcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxVQUFVO0lBQ3BELElBQUksQ0FBQyxDQUFDLElBQUksWUFBWSxXQUFXLENBQUMsRUFBRTtRQUNoQyxPQUFPLElBQUksV0FBVyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0tBQy9EO0lBQ0QsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDO1FBQ3BCLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDNUM7U0FBTTtRQUNILElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0tBQ25CO0lBQ0QsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUM3QyxJQUFJLENBQUMsY0FBYyxHQUFHLE9BQU8sSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDO0lBQ2hELElBQUks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SUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzNDLENBQUMsQ0FBQztBQUVGLFdBQVcsQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFHLFVBQVUsSUFBSSxFQUFFLE9BQU87SUFDbkQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDN0MsQ0FBQyxDQUFDO0FBRUYsV0FBVyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsVUFBVSxLQUFLLEVBQUUsR0FBRztJQUNoRCxPQUFPLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNyRCxDQUFDLENBQUM7QUFFRixXQUFXLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRztJQUMzQixPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUMxQixDQUFDLENBQUM7QUFFRixXQUFXLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNvcnRlZEFycmF5O1xuXG52YXIgU2hpbSA9IHJlcXVpcmUoXCIuL3NoaW1cIik7XG52YXIgR2VuZXJpY0NvbGxlY3Rpb24gPSByZXF1aXJlKFwiLi9nZW5lcmljLWNvbGxlY3Rpb25cIik7XG52YXIgUHJvcGVydHlDaGFuZ2VzID0gcmVxdWlyZShcIi4vbGlzdGVuL3Byb3BlcnR5LWNoYW5nZXNcIik7XG52YXIgUmFuZ2VDaGFuZ2VzID0gcmVxdWlyZShcIi4vbGlzdGVuL3JhbmdlLWNoYW5nZXNcIik7XG5cbmZ1bmN0aW9uIFNvcnRlZEFycmF5KHZhbHVlcywgZXF1YWxzLCBjb21wYXJlLCBnZXREZWZhdWx0KSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNvcnRlZEFycmF5KSkge1xuICAgICAgICByZXR1cm4gbmV3IFNvcnRlZEFycmF5KHZhbHVlcywgZXF1YWxzLCBjb21wYXJlLCBnZXREZWZhdWx0KTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVzKSkge1xuICAgICAgICB0aGlzLmFycmF5ID0gdmFsdWVzO1xuICAgICAgICB2YWx1ZXMgPSB2YWx1ZXMuc3BsaWNlKDAsIHZhbHVlcy5sZW5ndGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYXJyYXkgPSBbXTtcbiAgICB9XG4gICAgdGhpcy5jb250ZW50RXF1YWxzID0gZXF1YWxzIHx8IE9iamVjdC5lcXVhbHM7XG4gICAgdGhpcy5jb250ZW50Q29tcGFyZSA9IGNvbXBhcmUgfHwgT2JqZWN0LmNvbXBhcmU7XG4gICAgdGhpcy5nZXREZWZhdWx0ID0gZ2V0RGVmYXVsdCB8fCBGdW5jdGlvbi5ub29wO1xuXG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIHRoaXMuYWRkRWFjaCh2YWx1ZXMpO1xufVxuXG4vLyBoYWNrIHNvIHJlcXVpcmUoXCJzb3J0ZWQtYXJyYXlcIikuU29ydGVkQXJyYXkgd2lsbCB3b3JrIGluIE1vbnRhZ2VKU1xuU29ydGVkQXJyYXkuU29ydGVkQXJyYXkgPSBTb3J0ZWRBcnJheTtcblxuU29ydGVkQXJyYXkuZnJvbSA9IEdlbmVyaWNDb2xsZWN0aW9uLmZyb207XG5cbk9iamVjdC5hZGRFYWNoKFNvcnRlZEFycmF5LnByb3RvdHlwZSwgR2VuZXJpY0NvbGxlY3Rpb24ucHJvdG90eXBlKTtcbk9iamVjdC5hZGRFYWNoKFNvcnRlZEFycmF5LnByb3RvdHlwZSwgUHJvcGVydHlDaGFuZ2VzLnByb3RvdHlwZSk7XG5PYmplY3QuYWRkRWFjaChTb3J0ZWRBcnJheS5wcm90b3R5cGUsIFJhbmdlQ2hhbmdlcy5wcm90b3R5cGUpO1xuXG5Tb3J0ZWRBcnJheS5wcm90b3R5cGUuaXNTb3J0ZWQgPSB0cnVlO1xuXG5mdW5jdGlvbiBzZWFyY2goYXJyYXksIHZhbHVlLCBjb21wYXJlKSB7XG4gICAgdmFyIGZpcnN0ID0gMDtcbiAgICB2YXIgbGFzdCA9IGFycmF5Lmxlbmd0aCAtIDE7XG4gICAgd2hpbGUgKGZpcnN0IDw9IGxhc3QpIHtcbiAgICAgICAgdmFyIG1pZGRsZSA9IChmaXJzdCArIGxhc3QpID4+IDE7IC8vIE1hdGguZmxvb3IoIC8gMilcbiAgICAgICAgdmFyIGNvbXBhcmlzb24gPSBjb21wYXJlKHZhbHVlLCBhcnJheVttaWRkbGVdKTtcbiAgICAgICAgaWYgKGNvbXBhcmlzb24gPiAwKSB7XG4gICAgICAgICAgICBmaXJzdCA9IG1pZGRsZSArIDE7XG4gICAgICAgIH0gZWxzZSBpZiAoY29tcGFyaXNvbiA8IDApIHtcbiAgICAgICAgICAgIGxhc3QgPSBtaWRkbGUgLSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG1pZGRsZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLShmaXJzdCArIDEpO1xufVxuXG5mdW5jdGlvbiBkZXRlcm1pbmVJbmNvbXBhcmFibGVSYW5nZShpbmRleCwgYXJyYXksIHZhbHVlLCBjb21wYXJlLCBlcXVhbHMpIHtcbiAgICAvLyBSZXR1cm4gdGhlIGluY2x1c2l2ZSBzdGFydCBhbmQgZW5kIGluZGljZXMgb2YgdGhlIGluY29tcGFyYWJsZSBzdHJlYWsgY29udGFpbmluZyB2YWx1ZS5cbiAgICB2YXIgc3RhcnQgPSBpbmRleDtcbiAgICB2YXIgZW5kID0gaW5kZXg7XG5cbiAgICB3aGlsZSAoc3RhcnQgPiAwICYmIGNvbXBhcmUodmFsdWUsIGFycmF5W3N0YXJ0IC0gMV0pID09PSAwKSB7XG4gICAgICAgIHN0YXJ0LS07XG4gICAgfVxuXG4gICAgd2hpbGUgKGVuZCA8IGFycmF5Lmxlbmd0aCAtIDEgJiYgY29tcGFyZSh2YWx1ZSwgYXJyYXlbZW5kICsgMV0pID09PSAwKSB7XG4gICAgICAgIGVuZCsrO1xuICAgIH1cblxuICAgIHJldHVybiB7c3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZH07XG59XG5cbmZ1bmN0aW9uIHNlYXJjaEZpcnN0KGFycmF5LCB2YWx1ZSwgY29tcGFyZSwgZXF1YWxzKSB7XG4gICAgdmFyIGluZGV4ID0gc2VhcmNoKGFycmF5LCB2YWx1ZSwgY29tcGFyZSk7XG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJhbmdlID0gZGV0ZXJtaW5lSW5jb21wYXJhYmxlUmFuZ2UoaW5kZXgsIGFycmF5LCB2YWx1ZSwgY29tcGFyZSwgZXF1YWxzKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gcmFuZ2Uuc3RhcnQ7IGkgPD0gcmFuZ2UuZW5kOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlcXVhbHModmFsdWUsIGFycmF5W2ldKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2VhcmNoTGFzdChhcnJheSwgdmFsdWUsIGNvbXBhcmUsIGVxdWFscykge1xuICAgIHZhciBpbmRleCA9IHNlYXJjaChhcnJheSwgdmFsdWUsIGNvbXBhcmUpO1xuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByYW5nZSA9IGRldGVybWluZUluY29tcGFyYWJsZVJhbmdlKGluZGV4LCBhcnJheSwgdmFsdWUsIGNvbXBhcmUsIGVxdWFscyk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IHJhbmdlLmVuZDsgaSA+PSByYW5nZS5zdGFydDsgaS0tKSB7XG4gICAgICAgICAgICBpZiAoZXF1YWxzKHZhbHVlLCBhcnJheVtpXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNlYXJjaEZvckluc2VydGlvbkluZGV4KGFycmF5LCB2YWx1ZSwgY29tcGFyZSkge1xuICAgIHZhciBpbmRleCA9IHNlYXJjaChhcnJheSwgdmFsdWUsIGNvbXBhcmUpO1xuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgcmV0dXJuIC1pbmRleCAtIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGxhc3QgPSBhcnJheS5sZW5ndGggLSAxO1xuICAgICAgICB3aGlsZSAoaW5kZXggPCBsYXN0ICYmIGNvbXBhcmUodmFsdWUsIGFycmF5W2luZGV4ICsgMV0pID09PSAwKSB7XG4gICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG59XG5cblNvcnRlZEFycmF5LnByb3RvdHlwZS5jb25zdHJ1Y3RDbG9uZSA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoXG4gICAgICAgIHZhbHVlcyxcbiAgICAgICAgdGhpcy5jb250ZW50RXF1YWxzLFxuICAgICAgICB0aGlzLmNvbnRlbnRDb21wYXJlLFxuICAgICAgICB0aGlzLmdldERlZmF1bHRcbiAgICApO1xufTtcblxuU29ydGVkQXJyYXkucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uICh2YWx1ZSwgZXF1YWxzKSB7XG4gICAgaWYgKGVxdWFscykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTb3J0ZWRTZXQjaGFzIGRvZXMgbm90IHN1cHBvcnQgc2Vjb25kIGFyZ3VtZW50OiBlcXVhbHNcIik7XG4gICAgfVxuICAgIHZhciBpbmRleCA9IHNlYXJjaEZpcnN0KHRoaXMuYXJyYXksIHZhbHVlLCB0aGlzLmNvbnRlbnRDb21wYXJlLCB0aGlzLmNvbnRlbnRFcXVhbHMpO1xuICAgIHJldHVybiBpbmRleCAhPT0gLTE7XG59O1xuXG5Tb3J0ZWRBcnJheS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHZhbHVlLCBlcXVhbHMpIHtcbiAgICBpZiAoZXF1YWxzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNvcnRlZEFycmF5I2dldCBkb2VzIG5vdCBzdXBwb3J0IHNlY29uZCBhcmd1bWVudDogZXF1YWxzXCIpO1xuICAgIH1cbiAgICB2YXIgaW5kZXggPSBzZWFyY2hGaXJzdCh0aGlzLmFycmF5LCB2YWx1ZSwgdGhpcy5jb250ZW50Q29tcGFyZSwgdGhpcy5jb250ZW50RXF1YWxzKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFycmF5W2luZGV4XTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXREZWZhdWx0KHZhbHVlKTtcbiAgICB9XG59O1xuXG5Tb3J0ZWRBcnJheS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFyIGluZGV4ID0gc2VhcmNoRm9ySW5zZXJ0aW9uSW5kZXgodGhpcy5hcnJheSwgdmFsdWUsIHRoaXMuY29udGVudENvbXBhcmUpO1xuICAgIGlmICh0aGlzLmRpc3BhdGNoZXNSYW5nZUNoYW5nZXMpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEJlZm9yZVJhbmdlQ2hhbmdlKFt2YWx1ZV0sIEFycmF5LmVtcHR5LCBpbmRleCk7XG4gICAgfVxuICAgIHRoaXMuYXJyYXkuc3BsaWNlKGluZGV4LCAwLCB2YWx1ZSk7XG4gICAgdGhpcy5sZW5ndGgrKztcbiAgICBpZiAodGhpcy5kaXNwYXRjaGVzUmFuZ2VDaGFuZ2VzKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hSYW5nZUNoYW5nZShbdmFsdWVdLCBBcnJheS5lbXB0eSwgaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5cblNvcnRlZEFycmF5LnByb3RvdHlwZVtcImRlbGV0ZVwiXSA9IGZ1bmN0aW9uICh2YWx1ZSwgZXF1YWxzKSB7XG4gICAgaWYgKGVxdWFscykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTb3J0ZWRBcnJheSNkZWxldGUgZG9lcyBub3Qgc3VwcG9ydCBzZWNvbmQgYXJndW1lbnQ6IGVxdWFsc1wiKTtcbiAgICB9XG4gICAgdmFyIGluZGV4ID0gc2VhcmNoRmlyc3QodGhpcy5hcnJheSwgdmFsdWUsIHRoaXMuY29udGVudENvbXBhcmUsIHRoaXMuY29udGVudEVxdWFscyk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICBpZiAodGhpcy5kaXNwYXRjaGVzUmFuZ2VDaGFuZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoQmVmb3JlUmFuZ2VDaGFuZ2UoQXJyYXkuZW1wdHksIFt2YWx1ZV0sIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFycmF5LnNwbGljZU9uZShpbmRleCk7XG4gICAgICAgIHRoaXMubGVuZ3RoLS07XG4gICAgICAgIGlmICh0aGlzLmRpc3BhdGNoZXNSYW5nZUNoYW5nZXMpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hSYW5nZUNoYW5nZShBcnJheS5lbXB0eSwgW3ZhbHVlXSwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59O1xuXG5Tb3J0ZWRBcnJheS5wcm90b3R5cGUuZGVsZXRlQWxsID0gZnVuY3Rpb24gKHZhbHVlLCBlcXVhbHMpIHtcbiAgICBpZiAoZXF1YWxzKSB7XG4gICAgICAgIHZhciBjb3VudCA9IHRoaXMuYXJyYXkuZGVsZXRlQWxsKHZhbHVlLCBlcXVhbHMpO1xuICAgICAgICB0aGlzLmxlbmd0aCAtPSBjb3VudDtcbiAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBzdGFydCA9IHNlYXJjaEZpcnN0KHRoaXMuYXJyYXksIHZhbHVlLCB0aGlzLmNvbnRlbnRDb21wYXJlLCB0aGlzLmNvbnRlbnRFcXVhbHMpO1xuICAgICAgICBpZiAoc3RhcnQgIT09IC0xKSB7XG4gICAgICAgICAgICB2YXIgZW5kID0gc3RhcnQ7XG4gICAgICAgICAgICB3aGlsZSAodGhpcy5jb250ZW50RXF1YWxzKHZhbHVlLCB0aGlzLmFycmF5W2VuZF0pKSB7XG4gICAgICAgICAgICAgICAgZW5kKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbWludXMgPSB0aGlzLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZGlzcGF0Y2hlc1JhbmdlQ2hhbmdlcykge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hCZWZvcmVSYW5nZUNoYW5nZShBcnJheS5lbXB0eSwgbWludXMsIHN0YXJ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYXJyYXkuc3BsaWNlKHN0YXJ0LCBtaW51cy5sZW5ndGgpO1xuICAgICAgICAgICAgdGhpcy5sZW5ndGggLT0gbWludXMubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHRoaXMuZGlzcGF0Y2hlc1JhbmdlQ2hhbmdlcykge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hSYW5nZUNoYW5nZShBcnJheS5lbXB0eSwgbWludXMsIHN0YXJ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtaW51cy5sZW5ndGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cblNvcnRlZEFycmF5LnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gVE9ETyB0aHJvdyBlcnJvciBpZiBwcm92aWRlZCBhIHN0YXJ0IGluZGV4XG4gICAgcmV0dXJuIHNlYXJjaEZpcnN0KHRoaXMuYXJyYXksIHZhbHVlLCB0aGlzLmNvbnRlbnRDb21wYXJlLCB0aGlzLmNvbnRlbnRFcXVhbHMpO1xufTtcblxuU29ydGVkQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gVE9ETyB0aHJvdyBlcnJvciBpZiBwcm92aWRlZCBhIHN0YXJ0IGluZGV4XG4gICAgcmV0dXJuIHNlYXJjaExhc3QodGhpcy5hcnJheSwgdmFsdWUsIHRoaXMuY29udGVudENvbXBhcmUsIHRoaXMuY29udGVudEVxdWFscyk7XG59O1xuXG52YXIgZGVwcmVjYXRlZFdhcm5Ob25jZSA9IHt9O1xuZnVuY3Rpb24gZGVwcmVjYXRlZFdhcm4obXNnLCBub3RPbmNlKSB7XG4gICAgaWYgKFxuICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlLndhcm4gPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICAgICAgICAobm90T25jZSAhPT0gdHJ1ZSAmJiBkZXByZWNhdGVkV2Fybk5vbmNlLmhhc093blByb3BlcnR5KG1zZykgPT09IGZhbHNlKVxuICAgICkge1xuICAgICAgICBjb25zb2xlLndhcm4obXNnKTtcbiAgICAgICAgZGVwcmVjYXRlZFdhcm5Ob25jZVttc2ddKys7XG4gICAgfVxufVxuXG4vLyBUT0RPIHJlbW92ZSBpbiB2NiAobm90IHByZXNlbnQgaW4gdjIpXG5Tb3J0ZWRBcnJheS5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uICh2YWx1ZSwgZXF1YWxzLCBpbmRleCkge1xuICAgIGRlcHJlY2F0ZWRXYXJuKCdUaGlzIFNvcnRlZEFycmF5I2ZpbmQgdXNhZ2UgaXMgZGVwcmVjYXRlZCBwbGVhc2UgdXNlIFNvcnRlZEFycmF5I2ZpbmRWYWx1ZScpO1xuICAgIHJldHVybiB0aGlzLmZpbmRWYWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcblxuU29ydGVkQXJyYXkucHJvdG90eXBlLmZpbmRWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgZXF1YWxzLCBpbmRleCkge1xuICAgIC8vIFRPRE8gdGhyb3cgZXJyb3IgaWYgcHJvdmlkZWQgYSBzdGFydCBpbmRleFxuICAgIGlmIChlcXVhbHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU29ydGVkQXJyYXkjZmluZFZhbHVlIGRvZXMgbm90IHN1cHBvcnQgc2Vjb25kIGFyZ3VtZW50OiBlcXVhbHNcIik7XG4gICAgfVxuICAgIGlmIChpbmRleCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTb3J0ZWRBcnJheSNmaW5kVmFsdWUgZG9lcyBub3Qgc3VwcG9ydCB0aGlyZCBhcmd1bWVudDogaW5kZXhcIik7XG4gICAgfVxuICAgIC8vIFRPRE8gc3VwcG9ydCBpbml0aWFsIHBhcnRpdGlvbiBpbmRleFxuICAgIHJldHVybiBzZWFyY2hGaXJzdCh0aGlzLmFycmF5LCB2YWx1ZSwgdGhpcy5jb250ZW50Q29tcGFyZSwgdGhpcy5jb250ZW50RXF1YWxzKTtcbn07XG5cbi8vIFRPRE8gcmVtb3ZlIGluIHY2IChub3QgcHJlc2VudCBpbiB2MilcblNvcnRlZEFycmF5LnByb3RvdHlwZS5maW5kTGFzdCA9IGZ1bmN0aW9uICh2YWx1ZSwgZXF1YWxzLCBpbmRleCkge1xuICAgIGRlcHJlY2F0ZWRXYXJuKCdUaGlzIFNvcnRlZEFycmF5I2ZpbmRMYXN0IHVzYWdlIGlzIGRlcHJlY2F0ZWQgcGxlYXNlIHVzZSBTb3J0ZWRBcnJheSNmaW5kTGFzdFZhbHVlJyk7XG4gICAgcmV0dXJuIHRoaXMuZmluZExhc3RWYWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcblxuU29ydGVkQXJyYXkucHJvdG90eXBlLmZpbmRMYXN0VmFsdWUgPSBmdW5jdGlvbiAodmFsdWUsIGVxdWFscywgaW5kZXgpIHtcbiAgICBpZiAoZXF1YWxzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNvcnRlZEFycmF5I2ZpbmRMYXN0VmFsdWUgZG9lcyBub3Qgc3VwcG9ydCBzZWNvbmQgYXJndW1lbnQ6IGVxdWFsc1wiKTtcbiAgICB9XG4gICAgaWYgKGluZGV4KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNvcnRlZEFycmF5I2ZpbmRMYXN0VmFsdWUgZG9lcyBub3Qgc3VwcG9ydCB0aGlyZCBhcmd1bWVudDogaW5kZXhcIik7XG4gICAgfVxuICAgIC8vIFRPRE8gc3VwcG9ydCBpbml0aWFsIHBhcnRpdGlvbiBpbmRleFxuICAgIHJldHVybiBzZWFyY2hMYXN0KHRoaXMuYXJyYXksIHZhbHVlLCB0aGlzLmNvbnRlbnRDb21wYXJlLCB0aGlzLmNvbnRlbnRFcXVhbHMpO1xufTtcblxuU29ydGVkQXJyYXkucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hZGRFYWNoKGFyZ3VtZW50cyk7XG59O1xuXG5Tb3J0ZWRBcnJheS5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmFkZEVhY2goYXJndW1lbnRzKTtcbn07XG5cblNvcnRlZEFycmF5LnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbCA9IHRoaXMuYXJyYXkucG9wKCk7XG4gICAgdGhpcy5sZW5ndGggPSB0aGlzLmFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gdmFsO1xufTtcblxuU29ydGVkQXJyYXkucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWwgPSB0aGlzLmFycmF5LnNoaWZ0KCk7XG4gICAgdGhpcy5sZW5ndGggPSB0aGlzLmFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gdmFsO1xufTtcblxuU29ydGVkQXJyYXkucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmFycmF5LnNsaWNlLmFwcGx5KHRoaXMuYXJyYXksIGFyZ3VtZW50cyk7XG59O1xuXG5Tb3J0ZWRBcnJheS5wcm90b3R5cGUuc3BsaWNlID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGggLyouLi5wbHVzKi8pIHtcbiAgICByZXR1cm4gdGhpcy5zd2FwKGluZGV4LCBsZW5ndGgsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMikpO1xufTtcblxuU29ydGVkQXJyYXkucHJvdG90eXBlLnN3YXAgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCwgcGx1cykge1xuICAgIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5lbXB0eTtcbiAgICB9XG4gICAgaW5kZXggPSBpbmRleCB8fCAwO1xuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggKz0gdGhpcy5sZW5ndGg7XG4gICAgfVxuICAgIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsZW5ndGggPSBJbmZpbml0eTtcbiAgICB9XG4gICAgdmFyIG1pbnVzID0gdGhpcy5zbGljZShpbmRleCwgaW5kZXggKyBsZW5ndGgpO1xuICAgIGlmICh0aGlzLmRpc3BhdGNoZXNSYW5nZUNoYW5nZXMpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEJlZm9yZVJhbmdlQ2hhbmdlKHBsdXMsIG1pbnVzLCBpbmRleCk7XG4gICAgfVxuICAgIHRoaXMuYXJyYXkuc3BsaWNlKGluZGV4LCBsZW5ndGgpO1xuICAgIHRoaXMubGVuZ3RoIC09IG1pbnVzLmxlbmd0aDtcbiAgICBpZiAodGhpcy5kaXNwYXRjaGVzUmFuZ2VDaGFuZ2VzKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hSYW5nZUNoYW5nZShBcnJheS5lbXB0eSwgbWludXMsIGluZGV4KTtcbiAgICB9XG4gICAgdGhpcy5hZGRFYWNoKHBsdXMpO1xuICAgIHJldHVybiBtaW51cztcbn07XG5cblNvcnRlZEFycmF5LnByb3RvdHlwZS5yZWR1Y2UgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGJhc2lzIC8qLCB0aGlzcCovKSB7XG4gICAgdmFyIHRoaXNwID0gYXJndW1lbnRzWzJdO1xuICAgIHJldHVybiB0aGlzLmFycmF5LnJlZHVjZShmdW5jdGlvbiAoYmFzaXMsIHZhbHVlLCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwodGhpc3AsIGJhc2lzLCB2YWx1ZSwga2V5LCB0aGlzKTtcbiAgICB9LCBiYXNpcywgdGhpcyk7XG59O1xuXG5Tb3J0ZWRBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoaXNwID0gYXJndW1lbnRzWzJdO1xuICAgIHJldHVybiB0aGlzLmFycmF5LnJlZHVjZVJpZ2h0KGZ1bmN0aW9uIChiYXNpcywgdmFsdWUsIGtleSkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2suY2FsbCh0aGlzcCwgYmFzaXMsIHZhbHVlLCBrZXksIHRoaXMpO1xuICAgIH0sIGJhc2lzLCB0aGlzKTtcbn07XG5cblNvcnRlZEFycmF5LnByb3RvdHlwZS5taW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFycmF5WzBdO1xuICAgIH1cbn07XG5cblNvcnRlZEFycmF5LnByb3RvdHlwZS5tYXggPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFycmF5W3RoaXMubGVuZ3RoIC0gMV07XG4gICAgfVxufTtcblxuU29ydGVkQXJyYXkucHJvdG90eXBlLm9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5hcnJheS5vbmUoKTtcbn07XG5cblNvcnRlZEFycmF5LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbWludXM7XG4gICAgaWYgKHRoaXMuZGlzcGF0Y2hlc1JhbmdlQ2hhbmdlcykge1xuICAgICAgICBtaW51cyA9IHRoaXMuYXJyYXkuc2xpY2UoKTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEJlZm9yZVJhbmdlQ2hhbmdlKEFycmF5LmVtcHR5LCBtaW51cywgMCk7XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICB0aGlzLmFycmF5LmNsZWFyKCk7XG4gICAgaWYgKHRoaXMuZGlzcGF0Y2hlc1JhbmdlQ2hhbmdlcykge1xuICAgICAgICB0aGlzLmRpc3BhdGNoUmFuZ2VDaGFuZ2UoQXJyYXkuZW1wdHksIG1pbnVzLCAwKTtcbiAgICB9XG59O1xuXG5Tb3J0ZWRBcnJheS5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKHRoYXQsIGVxdWFscykge1xuICAgIHJldHVybiB0aGlzLmFycmF5LmVxdWFscyh0aGF0LCBlcXVhbHMpO1xufTtcblxuU29ydGVkQXJyYXkucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiAodGhhdCwgY29tcGFyZSkge1xuICAgIHJldHVybiB0aGlzLmFycmF5LmNvbXBhcmUodGhhdCwgY29tcGFyZSk7XG59O1xuXG5Tb3J0ZWRBcnJheS5wcm90b3R5cGUuaXRlcmF0ZSA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzLkl0ZXJhdG9yKHRoaXMuYXJyYXksIHN0YXJ0LCBlbmQpO1xufTtcblxuU29ydGVkQXJyYXkucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5KCk7XG59O1xuXG5Tb3J0ZWRBcnJheS5wcm90b3R5cGUuSXRlcmF0b3IgPSBBcnJheS5wcm90b3R5cGUuSXRlcmF0b3I7XG4iXX0=