"use strict";
var SortedSet = require("../sorted-set");
var SortedArraySet = require("../sorted-array-set");
var Fuzz = require("../spec/fuzz");
var iterations = 1000;
var size = 10000;
[10, 100, 100, 101, 105, 112, 125, 150, 200, 300, 500, 1000, 10000, 20000, 30000].forEach(function (size) {
    var numbers = [];
    for (var i = 0; i < size; i++) {
        numbers.push(i);
    }
    var random = Fuzz.makeRandom();
    numbers.sort(function () {
        return random() < .5;
    });
    function bench(Sorted) {
        var set = Sorted();
        for (var i = 0; i < size; i++) {
            set.add(numbers[i]);
        }
        for (var i = 0; i < size; i++) {
            set.delete(numbers[i]);
        }
    }
    function hrtime() {
        var hrtime = process.hrtime();
        return hrtime[0] * 1e3 + hrtime[1] / 1e6;
    }
    function time(callback) {
        var start = hrtime();
        callback();
        var stop = hrtime();
        return stop - start;
    }
    ;
    var sortedSetSpeed = time(function () {
        bench(SortedSet);
    });
    var sortedArraySetSpeed = time(function () {
        bench(SortedArraySet);
    });
    console.log(size + ":", (sortedSetSpeed < sortedArraySetSpeed ? "SortedSet WINS" : "SortedArraySet WINS"));
    console.log('     SortedSet:', sortedSetSpeed);
    console.log('SortedArraySet:', sortedArraySetSpeed);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydGVkLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9qcy1wcm90b3R5cGVzL3BhY2thZ2VzL2NvbGxlY3Rpb25zL2JlbmNoL3NvcnRlZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3pDLElBQUksY0FBYyxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBRXBELElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNuQyxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUM7QUFDdEIsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDO0FBRWpCLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxJQUFJO0lBRXBHLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztJQUNqQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzNCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbkI7SUFDRCxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDL0IsT0FBTyxDQUFDLElBQUksQ0FBQztRQUNULE9BQU8sTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDO0lBQ3pCLENBQUMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxLQUFLLENBQUMsTUFBTTtRQUNqQixJQUFJLEdBQUcsR0FBRyxNQUFNLEVBQUUsQ0FBQztRQUNuQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzNCLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDdkI7UUFDRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzNCLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDMUI7SUFDTCxDQUFDO0lBRUQsU0FBUyxNQUFNO1FBQ1gsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzlCLE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQzdDLENBQUM7SUFFRCxTQUFTLElBQUksQ0FBQyxRQUFRO1FBQ2xCLElBQUksS0FBSyxHQUFHLE1BQU0sRUFBRSxDQUFDO1FBQ3JCLFFBQVEsRUFBRSxDQUFDO1FBQ1gsSUFBSSxJQUFJLEdBQUcsTUFBTSxFQUFFLENBQUM7UUFDcEIsT0FBTyxJQUFJLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7SUFBQSxDQUFDO0lBRUYsSUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNyQixDQUFDLENBQUMsQ0FBQztJQUNILElBQUksbUJBQW1CLEdBQUcsSUFBSSxDQUFDO1FBQzNCLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUMxQixDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLGNBQWMsR0FBRyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQztJQUMzRyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQy9DLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztBQUV4RCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbInZhciBTb3J0ZWRTZXQgPSByZXF1aXJlKFwiLi4vc29ydGVkLXNldFwiKTtcbnZhciBTb3J0ZWRBcnJheVNldCA9IHJlcXVpcmUoXCIuLi9zb3J0ZWQtYXJyYXktc2V0XCIpO1xuXG52YXIgRnV6eiA9IHJlcXVpcmUoXCIuLi9zcGVjL2Z1enpcIik7XG52YXIgaXRlcmF0aW9ucyA9IDEwMDA7XG52YXIgc2l6ZSA9IDEwMDAwO1xuXG5bMTAsIDEwMCwgMTAwLCAxMDEsIDEwNSwgMTEyLCAxMjUsIDE1MCwgMjAwLCAzMDAsIDUwMCwgMTAwMCwgMTAwMDAsIDIwMDAwLCAzMDAwMF0uZm9yRWFjaChmdW5jdGlvbiAoc2l6ZSkge1xuXG4gICAgdmFyIG51bWJlcnMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7IGkrKykge1xuICAgICAgICBudW1iZXJzLnB1c2goaSk7XG4gICAgfVxuICAgIHZhciByYW5kb20gPSBGdXp6Lm1ha2VSYW5kb20oKTtcbiAgICBudW1iZXJzLnNvcnQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcmFuZG9tKCkgPCAuNTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGJlbmNoKFNvcnRlZCkge1xuICAgICAgICB2YXIgc2V0ID0gU29ydGVkKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICBzZXQuYWRkKG51bWJlcnNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICBzZXQuZGVsZXRlKG51bWJlcnNbaV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaHJ0aW1lKCkge1xuICAgICAgICB2YXIgaHJ0aW1lID0gcHJvY2Vzcy5ocnRpbWUoKTtcbiAgICAgICAgcmV0dXJuIGhydGltZVswXSAqIDFlMyArIGhydGltZVsxXSAvIDFlNjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0aW1lKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBzdGFydCA9IGhydGltZSgpO1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB2YXIgc3RvcCA9IGhydGltZSgpO1xuICAgICAgICByZXR1cm4gc3RvcCAtIHN0YXJ0O1xuICAgIH07XG5cbiAgICB2YXIgc29ydGVkU2V0U3BlZWQgPSB0aW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYmVuY2goU29ydGVkU2V0KTtcbiAgICB9KTtcbiAgICB2YXIgc29ydGVkQXJyYXlTZXRTcGVlZCA9IHRpbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICBiZW5jaChTb3J0ZWRBcnJheVNldCk7XG4gICAgfSk7XG5cbiAgICBjb25zb2xlLmxvZyhzaXplICsgXCI6XCIsIChzb3J0ZWRTZXRTcGVlZCA8IHNvcnRlZEFycmF5U2V0U3BlZWQgPyBcIlNvcnRlZFNldCBXSU5TXCIgOiBcIlNvcnRlZEFycmF5U2V0IFdJTlNcIikpO1xuICAgIGNvbnNvbGUubG9nKCcgICAgIFNvcnRlZFNldDonLCBzb3J0ZWRTZXRTcGVlZCk7XG4gICAgY29uc29sZS5sb2coJ1NvcnRlZEFycmF5U2V0OicsIHNvcnRlZEFycmF5U2V0U3BlZWQpO1xuXG59KTtcbiJdfQ==