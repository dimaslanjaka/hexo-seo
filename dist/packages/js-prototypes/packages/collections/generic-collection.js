"use strict";
module.exports = GenericCollection;
function GenericCollection() {
    throw new Error("Can't construct. GenericCollection is a mixin.");
}
var DOMTokenList = global.DOMTokenList || function () { };
GenericCollection.EmptyArray = Object.freeze([]);
GenericCollection.prototype.addEach = function (values, mapFn, thisp) {
    //We want to eliminate everything but array like: Strings, Arrays, DOMTokenList
    if (values && (values instanceof Array || (values instanceof DOMTokenList) || values instanceof String)) {
        if (mapFn) {
            for (var i = 0; i < values.length; i++) {
                this.add(mapFn.call(thisp, values[i]), i);
            }
        }
        else {
            for (var i = 0; i < values.length; i++) {
                this.add(values[i], i);
            }
        }
    }
    else if (values && Object(values) === values) {
        if (typeof values.forEach === "function") {
            if (mapFn) {
                values.map(mapFn, thisp).forEach(this.add, this);
            }
            else {
                values.forEach(this.add, this);
            }
        }
        else if (typeof values.next === "function") {
            var value, i = 0;
            if (mapFn) {
                while ((value = values.next().value)) {
                    this.add(mapFn.call(thisp, value), i++);
                }
            }
            else {
                while ((value = values.next().value)) {
                    this.add(value, i++);
                }
            }
        }
        else if (typeof values.length === "number") {
            // Array-like objects that do not implement forEach, ergo,
            // Arguments
            if (mapFn) {
                for (var i = 0; i < values.length; i++) {
                    this.add(mapFn.call(thisp, values[i]), i);
                }
            }
            else {
                for (var i = 0; i < values.length; i++) {
                    this.add(values[i], i);
                }
            }
        }
        else {
            if (mapFn) {
                Object.keys(values).forEach(function (key) {
                    this.add(mapFn.call(thisp, values[key]), key);
                }, this);
            }
            else {
                Object.keys(values).forEach(function (key) {
                    this.add(values[key], key);
                }, this);
            }
        }
    }
    return this;
};
// This is sufficiently generic for Map (since the value may be a key)
// and ordered collections (since it forwards the equals argument)
GenericCollection.prototype.deleteEach = function (values, equals) {
    values.forEach(function (value) {
        this["delete"](value, equals);
    }, this);
    return this;
};
// all of the following functions are implemented in terms of "reduce".
// some need "constructClone".
GenericCollection.prototype.forEach = function (callback /*, thisp*/) {
    var thisp = arguments[1];
    return this.reduce(function (undefined, value, key, object, depth) {
        callback.call(thisp, value, key, object, depth);
    }, undefined);
};
GenericCollection.prototype.map = function (callback /*, thisp*/) {
    var thisp = arguments[1];
    var result = [];
    this.reduce(function (undefined, value, key, object, depth) {
        result.push(callback.call(thisp, value, key, object, depth));
    }, undefined);
    return result;
};
GenericCollection.prototype.enumerate = function (start) {
    if (start == null) {
        start = 0;
    }
    var result = [];
    this.reduce(function (undefined, value) {
        result.push([start++, value]);
    }, undefined);
    return result;
};
GenericCollection.prototype.group = function (callback, thisp, equals) {
    equals = equals || Object.equals;
    var groups = [];
    var keys = [];
    this.forEach(function (value, key, object) {
        var key = callback.call(thisp, value, key, object);
        var index = keys.indexOf(key, equals);
        var group;
        if (index === -1) {
            group = [];
            groups.push([key, group]);
            keys.push(key);
        }
        else {
            group = groups[index][1];
        }
        group.push(value);
    });
    return groups;
};
GenericCollection.prototype.toArray = function () {
    return this.map(Function.identity);
};
// this depends on stringable keys, which apply to Array and Iterator
// because they have numeric keys and all Maps since they may use
// strings as keys.  List, Set, and SortedSet have nodes for keys, so
// toObject would not be meaningful.
GenericCollection.prototype.toObject = function () {
    var object = {};
    this.reduce(function (undefined, value, key) {
        object[key] = value;
    }, undefined);
    return object;
};
GenericCollection.from = function () {
    return this.apply(this, arguments);
};
GenericCollection.prototype.filter = function (callback /*, thisp*/) {
    var thisp = arguments[1];
    var result = this.constructClone();
    this.reduce(function (undefined, value, key, object, depth) {
        if (callback.call(thisp, value, key, object, depth)) {
            result.add(value, key);
        }
    }, undefined);
    return result;
};
GenericCollection.prototype.every = function (callback /*, thisp*/) {
    var thisp = arguments[1];
    return this.reduce(function (result, value, key, object, depth) {
        return result && callback.call(thisp, value, key, object, depth);
    }, true);
};
GenericCollection.prototype.some = function (callback /*, thisp*/) {
    var thisp = arguments[1];
    return this.reduce(function (result, value, key, object, depth) {
        return result || callback.call(thisp, value, key, object, depth);
    }, false);
};
GenericCollection.prototype.all = function () {
    return this.every(Boolean);
};
GenericCollection.prototype.any = function () {
    return this.some(Boolean);
};
GenericCollection.prototype.min = function (compare) {
    compare = compare || this.contentCompare || Object.compare;
    var first = true;
    return this.reduce(function (result, value) {
        if (first) {
            first = false;
            return value;
        }
        else {
            return compare(value, result) < 0 ? value : result;
        }
    }, undefined);
};
GenericCollection.prototype.max = function (compare) {
    compare = compare || this.contentCompare || Object.compare;
    var first = true;
    return this.reduce(function (result, value) {
        if (first) {
            first = false;
            return value;
        }
        else {
            return compare(value, result) > 0 ? value : result;
        }
    }, undefined);
};
GenericCollection.prototype.sum = function (zero) {
    zero = zero === undefined ? 0 : zero;
    return this.reduce(function (a, b) {
        return a + b;
    }, zero);
};
GenericCollection.prototype.average = function (zero) {
    var sum = zero === undefined ? 0 : zero;
    var count = zero === undefined ? 0 : zero;
    this.reduce(function (undefined, value) {
        sum += value;
        count += 1;
    }, undefined);
    return sum / count;
};
GenericCollection.prototype.concat = function () {
    var result = this.constructClone(this);
    for (var i = 0; i < arguments.length; i++) {
        result.addEach(arguments[i]);
    }
    return result;
};
GenericCollection.prototype.flatten = function () {
    var self = this;
    return this.reduce(function (result, array) {
        array.forEach(function (value) {
            this.push(value);
        }, result, self);
        return result;
    }, []);
};
GenericCollection.prototype.zip = function () {
    var table = Array.prototype.slice.call(arguments);
    table.unshift(this);
    return Array.unzip(table);
};
GenericCollection.prototype.join = function (delimiter) {
    return this.reduce(function (result, string) {
        // work-around for reduce that does not support no-basis form
        if (result === void 0) {
            return string;
        }
        else {
            return result + delimiter + string;
        }
    }, void 0);
};
GenericCollection.prototype.sorted = function (compare, by, order) {
    compare = compare || this.contentCompare || Object.compare;
    // account for comparators generated by Function.by
    if (compare.by) {
        by = compare.by;
        compare = compare.compare || this.contentCompare || Object.compare;
    }
    else {
        by = by || Function.identity;
    }
    if (order === undefined)
        order = 1;
    return this.map(function (item) {
        return {
            by: by(item),
            value: item
        };
    })
        .sort(function (a, b) {
        return compare(a.by, b.by) * order;
    })
        .map(function (pair) {
        return pair.value;
    });
};
GenericCollection.prototype.reversed = function () {
    return this.constructClone(this).reverse();
};
GenericCollection.prototype.clone = function (depth, memo) {
    if (depth === undefined) {
        depth = Infinity;
    }
    else if (depth === 0) {
        return this;
    }
    var clone = this.constructClone();
    this.forEach(function (value, key) {
        clone.add(Object.clone(value, depth - 1, memo), key);
    }, this);
    return clone;
};
GenericCollection.prototype.only = function () {
    if (this.length === 1) {
        return this.one();
    }
};
GenericCollection.prototype.iterator = function () {
    return this.iterate.apply(this, arguments);
};
GenericCollection._sizePropertyDescriptor = {
    get: function () {
        return this.length;
    },
    enumerable: false,
    configurable: true
};
Object.defineProperty(GenericCollection.prototype, "size", GenericCollection._sizePropertyDescriptor);
require("./shim-array");
//# sourceMappingURL=data:application/json;base64,