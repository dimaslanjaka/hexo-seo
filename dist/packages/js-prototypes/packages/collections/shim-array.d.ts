export = Array;
declare var Array: ArrayConstructor;
interface Array<T> extends RelativeIndexable<T> {
    [n: number]: T;
    pop(): T | undefined;
    push(...items: T[]): number;
    concat(...items: ConcatArray<T>[]): T[];
    concat(...items: (T | ConcatArray<T>)[]): T[];
    join(separator?: string | undefined): string;
    reverse(): T[];
    shift(): T | undefined;
    slice(start?: number | undefined, end?: number | undefined): T[];
    sort(compareFn?: ((a: T, b: T) => number) | undefined): T[];
    splice(start: number, deleteCount?: number | undefined): T[];
    splice(start: number, deleteCount: number, ...items: T[]): T[];
    unshift(...items: T[]): number;
    indexOf(searchElement: T, fromIndex?: number | undefined): number;
    lastIndexOf(searchElement: T, fromIndex?: number | undefined): number;
    every<S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): this is S[];
    every(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;
    some(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;
    forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;
    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];
    filter<S_1 extends T>(predicate: (value: T, index: number, array: T[]) => value is S_1, thisArg?: any): S_1[];
    filter(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): T[];
    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;
    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;
    reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: T, currentIndex: number, array: T[]) => U_1, initialValue: U_1): U_1;
    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;
    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;
    reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: T, currentIndex: number, array: T[]) => U_2, initialValue: U_2): U_2;
    find<S_2 extends T>(predicate: (this: void, value: T, index: number, obj: T[]) => value is S_2, thisArg?: any): S_2 | undefined;
    find(predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any): T | undefined;
    findIndex(predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any): number;
    fill(value: T, start?: number | undefined, end?: number | undefined): T[];
    copyWithin(target: number, start: number, end?: number | undefined): T[];
    entries(): IterableIterator<[number, T]>;
    keys(): IterableIterator<number>;
    values(): IterableIterator<T>;
    includes(searchElement: T, fromIndex?: number | undefined): boolean;
    flatMap<U_3, This = undefined>(callback: (this: This, value: T, index: number, array: T[]) => U_3 | readonly U_3[], thisArg?: This | undefined): U_3[];
    flat<A, D extends number = 1>(this: A, depth?: D | undefined): FlatArray<A, D>[];
    unique: () => T[];
    uniqueObjectKey: (key: string, removeNull?: boolean | undefined) => T[];
    hapusItemDariArrayLain: (...arrayLain: any[]) => any[];
    random: <T_1>() => T_1;
    add(element: any): T[];
    add(element: any): T[];
    add(element: any): T[];
    addAll(otherArray: T[]): T[];
    addAll(otherArray: T[]): T[];
    addAll(otherArray: T[]): T[];
    range(start: number, end: number): T[];
    range(start: number, end: number): T[];
    range(start: number, end: number): T[];
    first(n: number): T[];
    first(n: number): T[];
    first(n: number): T[];
    last(n: number): T[];
    last(n: number): T[];
    last(n: number): T[];
    unset(n: any): T[];
    unset(n: any): T[];
    unset(n: any): T[];
    deleteAt(n: number): T[];
    deleteAt(n: number): T[];
    deleteAt(n: number): T[];
    compact(): T[];
    compact(): T[];
    compact(): T[];
    exists(n: number): boolean;
    exists(n: number): boolean;
    exists(n: number): boolean;
    contains(obj: any): boolean;
    contains(obj: any): boolean;
    contains(obj: any): boolean;
    hasIndex(n: number): boolean;
    hasIndex(n: number): boolean;
    hasIndex(n: number): boolean;
    shuffle(): T[];
    shuffle(): T[];
    shuffle(): T[];
    removeEmpties(): T[];
    removeEmpties(): T[];
    removeEmpties(): T[];
    trim(): string[];
    trim(): string[];
    trim(): string[];
    [Symbol.iterator](): IterableIterator<T>;
    [Symbol.unscopables](): {
        copyWithin: boolean;
        entries: boolean;
        fill: boolean;
        find: boolean;
        findIndex: boolean;
        keys: boolean;
        values: boolean;
    };
}
