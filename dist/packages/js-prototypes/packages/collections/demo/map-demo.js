"use strict";
var Map = require("../map");
var map = new Map();
map.set('a', 10);
map.set('b', 20);
var mapIter = map.keys(), key;
while (key = mapIter.next().value) {
    console.log(key);
}
var map = new Map();
var a = {}, b = {}, c = {};
map.set(a, 10);
map.set(b, 20);
map.set(c, 30);
console.log(map.get(b));
map.log();
map.forEach(function (value, key) {
    console.log(key + ': ' + value);
});
map.delete(a);
console.log(map.valuesArray());
console.log('\nclone');
console.log(map.clone().entriesArray());
console.log(new Map().entriesArray());
console.log(new Map({ a: 10, b: 20 }).entriesArray());
console.log(new Map(['a', 'b', 'c']).entriesArray());
console.log(new Map(new Map({ a: 10, b: 20 })).entriesArray());
console.log(new Map({ a: 10, b: 20 }).concat({ c: 30, d: 40 }).toObject());
// a case that may (depending on engine) distinguish a fast map from a map
// (with keys in insertion order)
var map = new Map();
map.set(10, 'b');
map.set(0, 'a');
console.log(map.toArray());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLWRlbW8uanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL2pzLXByb3RvdHlwZXMvcGFja2FnZXMvY29sbGVjdGlvbnMvZGVtby9tYXAtZGVtby5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRTVCLElBQUksR0FBRyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7QUFDcEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDakIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDakIsSUFBSSxPQUFPLEdBQUcsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFFLEdBQUcsQ0FBQztBQUM5QixPQUFPLEdBQUcsR0FBRyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFO0lBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDcEI7QUFFRCxJQUFJLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDM0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDZixHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNmLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEIsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRVYsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEtBQUssRUFBRSxHQUFHO0lBQzVCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQztBQUNwQyxDQUFDLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBRS9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztBQUV4QyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztBQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO0FBQ3BELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztBQUNyRCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7QUFFN0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBRXZFLDBFQUEwRTtBQUMxRSxpQ0FBaUM7QUFDakMsSUFBSSxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUNwQixHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNqQixHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNoQixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgTWFwID0gcmVxdWlyZShcIi4uL21hcFwiKTtcblxudmFyIG1hcCA9IG5ldyBNYXAoKTtcbm1hcC5zZXQoJ2EnLCAxMCk7XG5tYXAuc2V0KCdiJywgMjApO1xudmFyIG1hcEl0ZXIgPSBtYXAua2V5cygpLCBrZXk7XG53aGlsZSAoa2V5ID0gbWFwSXRlci5uZXh0KCkudmFsdWUpIHtcbiAgICBjb25zb2xlLmxvZyhrZXkpO1xufVxuXG52YXIgbWFwID0gbmV3IE1hcCgpO1xudmFyIGEgPSB7fSwgYiA9IHt9LCBjID0ge307XG5tYXAuc2V0KGEsIDEwKTtcbm1hcC5zZXQoYiwgMjApO1xubWFwLnNldChjLCAzMCk7XG5jb25zb2xlLmxvZyhtYXAuZ2V0KGIpKTtcbm1hcC5sb2coKTtcblxubWFwLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICBjb25zb2xlLmxvZyhrZXkgKyAnOiAnICsgdmFsdWUpO1xufSk7XG5cbm1hcC5kZWxldGUoYSk7XG5jb25zb2xlLmxvZyhtYXAudmFsdWVzQXJyYXkoKSk7XG5cbmNvbnNvbGUubG9nKCdcXG5jbG9uZScpO1xuY29uc29sZS5sb2cobWFwLmNsb25lKCkuZW50cmllc0FycmF5KCkpO1xuXG5jb25zb2xlLmxvZyhuZXcgTWFwKCkuZW50cmllc0FycmF5KCkpO1xuY29uc29sZS5sb2cobmV3IE1hcCh7YTogMTAsIGI6IDIwfSkuZW50cmllc0FycmF5KCkpO1xuY29uc29sZS5sb2cobmV3IE1hcChbJ2EnLCAnYicsICdjJ10pLmVudHJpZXNBcnJheSgpKTtcbmNvbnNvbGUubG9nKG5ldyBNYXAobmV3IE1hcCh7YTogMTAsIGI6IDIwfSkpLmVudHJpZXNBcnJheSgpKTtcblxuY29uc29sZS5sb2cobmV3IE1hcCh7YTogMTAsIGI6IDIwfSkuY29uY2F0KHtjOiAzMCwgZDogNDB9KS50b09iamVjdCgpKTtcblxuLy8gYSBjYXNlIHRoYXQgbWF5IChkZXBlbmRpbmcgb24gZW5naW5lKSBkaXN0aW5ndWlzaCBhIGZhc3QgbWFwIGZyb20gYSBtYXBcbi8vICh3aXRoIGtleXMgaW4gaW5zZXJ0aW9uIG9yZGVyKVxudmFyIG1hcCA9IG5ldyBNYXAoKTtcbm1hcC5zZXQoMTAsICdiJyk7XG5tYXAuc2V0KDAsICdhJyk7XG5jb25zb2xlLmxvZyhtYXAudG9BcnJheSgpKTtcbiJdfQ==