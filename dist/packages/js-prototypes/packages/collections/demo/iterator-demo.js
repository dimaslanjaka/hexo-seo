"use strict";
var Iterator = require("../iterator");
var List = require("../list");
Iterator.range(10).forEach(function (n) {
    console.log(n);
});
Iterator.iterate([1, 2, 3]).forEach(function (n) {
    console.log(n);
});
console.log('cycle');
var c = Iterator.cycle([0, 1]);
console.log(c.next());
console.log(c.next());
console.log(c.next());
console.log('cycle string');
Iterator.cycle("ab", 1).forEach(function (n) {
    console.log(n);
});
console.log('repeat 1 ten times');
Iterator.repeat(1, 10).forEach(console.log);
console.log('reduce');
var sum = Iterator.range(10).reduce(function (xs, x, i) {
    console.log(xs, x, i);
    return xs + x;
}, 0);
console.log(sum);
console.log('every');
var g = Iterator.range(10);
console.log(g.every(function (n) {
    return n < 5;
}));
console.log(g.toArray());
console.log('generic on array');
Iterator.prototype.forEach.call([1, 2, 3], console.log);
console.log('concat');
Iterator.concat([Iterator.range(3), Iterator.range(3)])
    .forEach(console.log);
Iterator.range(3).concat(Iterator.range(3))
    .forEach(console.log);
console.log('chain');
Iterator.chain(Iterator.range(3), Iterator.range(3))
    .forEach(console.log);
console.log("drop while");
Iterator.range(20).dropWhile(function (n) {
    return n < 10;
}).forEach(console.log);
console.log("take while");
Iterator.range(20).takeWhile(function (n) {
    return n < 10;
}).forEach(console.log);
// unzip
console.log("unzip");
Iterator.unzip([
    Iterator.count(),
    Iterator("abc")
]).forEach(console.log, console);
// zip
console.log("zip");
Iterator.zip(Iterator.count(), Iterator("abc")).forEach(console.log);
// zipIterator short-circuits on shortest in the race
console.log(".zip");
Iterator.count().zipIterator("abc").toArray()
    .forEach(console.log);
// filter
console.log(".filter");
Iterator.range(10).filterIterator(function (n) {
    return n & 1;
})
    .forEach(console.log);
// enumerate
console.log('enumerate');
console.log(Iterator("abc").enumerate().toArray());
console.log(Iterator("abc").enumerate(1).toArray());
console.log(Iterator("abc").enumerate(1, 'i', 'x').toArray());
var iterator = new Iterator([1, 2, 3, 4, 5]);
iterator.mapIterator(function (n) {
    console.log('producing', n * 2);
    return n * 2;
})
    .filterIterator(function (n) {
    if (n % 3) {
        return n;
    }
    else {
        console.log('filtering', n);
    }
})
    .forEach(function (n) {
    console.log('consuming', n);
});
list = new List([1, 2, 3, 4, 5]);
var iterator = list.iterate();
console.log(iterator.next());
iterator = new Iterator(iterator);
console.log(iterator.next());
console.log(iterator.sum());
list = new List([1, 2, 3, 4, 5]);
var iterator = new Iterator(list);
console.log(iterator.next());
iterator = new Iterator(iterator);
console.log(iterator.next());
console.log(iterator.average());
console.log(Iterator([[1, 2], [3, 4]]).flatten());
console.log(Iterator([1, 2, 3, 4]).max());
console.log(Iterator("abc").sum(""));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlcmF0b3ItZGVtby5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvanMtcHJvdG90eXBlcy9wYWNrYWdlcy9jb2xsZWN0aW9ucy9kZW1vL2l0ZXJhdG9yLWRlbW8uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN0QyxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFOUIsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO0lBQ2xDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkIsQ0FBQyxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7SUFDekMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuQixDQUFDLENBQUMsQ0FBQztBQUVILE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDckIsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBRXRCLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDNUIsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztJQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25CLENBQUMsQ0FBQyxDQUFDO0FBRUgsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQ2xDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFNUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN0QixJQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUNsRCxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEIsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ2xCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNOLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNyQixJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzNCLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUM7SUFDM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2pCLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDSixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBRXpCLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUNoQyxRQUFRLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUV0RCxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3RCLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN0RCxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRXRCLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDMUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUV0QixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3JCLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ25ELE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUMxQixRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7SUFDcEMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2xCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUMxQixRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7SUFDcEMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2xCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFeEIsUUFBUTtBQUNSLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDckIsUUFBUSxDQUFDLEtBQUssQ0FBQztJQUNYLFFBQVEsQ0FBQyxLQUFLLEVBQUU7SUFDaEIsUUFBUSxDQUFDLEtBQUssQ0FBQztDQUNsQixDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFFakMsTUFBTTtBQUNOLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbkIsUUFBUSxDQUFDLEdBQUcsQ0FDUixRQUFRLENBQUMsS0FBSyxFQUFFLEVBQ2hCLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FDbEIsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRXZCLHFEQUFxRDtBQUNyRCxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3BCLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxFQUFFO0tBQzVDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFdEIsU0FBUztBQUNULE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDdEIsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDO0lBQ3pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNqQixDQUFDLENBQUM7S0FDRCxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRXRCLFlBQVk7QUFDWixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFDbkQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFDcEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUU5RCxJQUFJLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdDLFFBQVEsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDO0lBQzVCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDakIsQ0FBQyxDQUFDO0tBQ0QsY0FBYyxDQUFDLFVBQVUsQ0FBQztJQUN2QixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDUCxPQUFPLENBQUMsQ0FBQztLQUNaO1NBQU07UUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUMvQjtBQUNMLENBQUMsQ0FBQztLQUNELE9BQU8sQ0FBQyxVQUFVLENBQUM7SUFDaEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDaEMsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM3QixRQUFRLEdBQUcsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM3QixPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBRTVCLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLElBQUksUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFDN0IsUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2xDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFDN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUVoQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFBO0FBRWpELE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBRTFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgSXRlcmF0b3IgPSByZXF1aXJlKFwiLi4vaXRlcmF0b3JcIik7XG52YXIgTGlzdCA9IHJlcXVpcmUoXCIuLi9saXN0XCIpO1xuXG5JdGVyYXRvci5yYW5nZSgxMCkuZm9yRWFjaChmdW5jdGlvbiAobikge1xuICAgIGNvbnNvbGUubG9nKG4pO1xufSk7XG5cbkl0ZXJhdG9yLml0ZXJhdGUoWzEsMiwzXSkuZm9yRWFjaChmdW5jdGlvbiAobikge1xuICAgIGNvbnNvbGUubG9nKG4pO1xufSk7XG5cbmNvbnNvbGUubG9nKCdjeWNsZScpO1xudmFyIGMgPSBJdGVyYXRvci5jeWNsZShbMCwgMV0pO1xuY29uc29sZS5sb2coYy5uZXh0KCkpO1xuY29uc29sZS5sb2coYy5uZXh0KCkpO1xuY29uc29sZS5sb2coYy5uZXh0KCkpO1xuXG5jb25zb2xlLmxvZygnY3ljbGUgc3RyaW5nJyk7XG5JdGVyYXRvci5jeWNsZShcImFiXCIsIDEpLmZvckVhY2goZnVuY3Rpb24gKG4pIHtcbiAgICBjb25zb2xlLmxvZyhuKTtcbn0pO1xuXG5jb25zb2xlLmxvZygncmVwZWF0IDEgdGVuIHRpbWVzJyk7XG5JdGVyYXRvci5yZXBlYXQoMSwgMTApLmZvckVhY2goY29uc29sZS5sb2cpO1xuXG5jb25zb2xlLmxvZygncmVkdWNlJyk7XG52YXIgc3VtID0gSXRlcmF0b3IucmFuZ2UoMTApLnJlZHVjZShmdW5jdGlvbiAoeHMsIHgsIGkpIHtcbiAgICBjb25zb2xlLmxvZyh4cywgeCwgaSk7XG4gICAgcmV0dXJuIHhzICsgeDtcbn0sIDApO1xuY29uc29sZS5sb2coc3VtKTtcblxuY29uc29sZS5sb2coJ2V2ZXJ5Jyk7XG52YXIgZyA9IEl0ZXJhdG9yLnJhbmdlKDEwKTtcbmNvbnNvbGUubG9nKGcuZXZlcnkoZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gbiA8IDU7XG59KSk7XG5jb25zb2xlLmxvZyhnLnRvQXJyYXkoKSk7XG5cbmNvbnNvbGUubG9nKCdnZW5lcmljIG9uIGFycmF5Jyk7XG5JdGVyYXRvci5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKFsxLDIsM10sIGNvbnNvbGUubG9nKTtcblxuY29uc29sZS5sb2coJ2NvbmNhdCcpO1xuSXRlcmF0b3IuY29uY2F0KFtJdGVyYXRvci5yYW5nZSgzKSwgSXRlcmF0b3IucmFuZ2UoMyldKVxuLmZvckVhY2goY29uc29sZS5sb2cpO1xuXG5JdGVyYXRvci5yYW5nZSgzKS5jb25jYXQoSXRlcmF0b3IucmFuZ2UoMykpXG4uZm9yRWFjaChjb25zb2xlLmxvZyk7XG5cbmNvbnNvbGUubG9nKCdjaGFpbicpO1xuSXRlcmF0b3IuY2hhaW4oSXRlcmF0b3IucmFuZ2UoMyksIEl0ZXJhdG9yLnJhbmdlKDMpKVxuLmZvckVhY2goY29uc29sZS5sb2cpO1xuXG5jb25zb2xlLmxvZyhcImRyb3Agd2hpbGVcIik7XG5JdGVyYXRvci5yYW5nZSgyMCkuZHJvcFdoaWxlKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIG4gPCAxMDtcbn0pLmZvckVhY2goY29uc29sZS5sb2cpO1xuXG5jb25zb2xlLmxvZyhcInRha2Ugd2hpbGVcIik7XG5JdGVyYXRvci5yYW5nZSgyMCkudGFrZVdoaWxlKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIG4gPCAxMDtcbn0pLmZvckVhY2goY29uc29sZS5sb2cpO1xuXG4vLyB1bnppcFxuY29uc29sZS5sb2coXCJ1bnppcFwiKTtcbkl0ZXJhdG9yLnVuemlwKFtcbiAgICBJdGVyYXRvci5jb3VudCgpLFxuICAgIEl0ZXJhdG9yKFwiYWJjXCIpXG5dKS5mb3JFYWNoKGNvbnNvbGUubG9nLCBjb25zb2xlKTtcblxuLy8gemlwXG5jb25zb2xlLmxvZyhcInppcFwiKTtcbkl0ZXJhdG9yLnppcChcbiAgICBJdGVyYXRvci5jb3VudCgpLFxuICAgIEl0ZXJhdG9yKFwiYWJjXCIpXG4pLmZvckVhY2goY29uc29sZS5sb2cpO1xuXG4vLyB6aXBJdGVyYXRvciBzaG9ydC1jaXJjdWl0cyBvbiBzaG9ydGVzdCBpbiB0aGUgcmFjZVxuY29uc29sZS5sb2coXCIuemlwXCIpO1xuSXRlcmF0b3IuY291bnQoKS56aXBJdGVyYXRvcihcImFiY1wiKS50b0FycmF5KClcbi5mb3JFYWNoKGNvbnNvbGUubG9nKTtcblxuLy8gZmlsdGVyXG5jb25zb2xlLmxvZyhcIi5maWx0ZXJcIilcbkl0ZXJhdG9yLnJhbmdlKDEwKS5maWx0ZXJJdGVyYXRvcihmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBuICYgMTtcbn0pXG4uZm9yRWFjaChjb25zb2xlLmxvZyk7XG5cbi8vIGVudW1lcmF0ZVxuY29uc29sZS5sb2coJ2VudW1lcmF0ZScpO1xuY29uc29sZS5sb2coSXRlcmF0b3IoXCJhYmNcIikuZW51bWVyYXRlKCkudG9BcnJheSgpKTtcbmNvbnNvbGUubG9nKEl0ZXJhdG9yKFwiYWJjXCIpLmVudW1lcmF0ZSgxKS50b0FycmF5KCkpO1xuY29uc29sZS5sb2coSXRlcmF0b3IoXCJhYmNcIikuZW51bWVyYXRlKDEsICdpJywgJ3gnKS50b0FycmF5KCkpO1xuXG52YXIgaXRlcmF0b3IgPSBuZXcgSXRlcmF0b3IoWzEsIDIsIDMsIDQsIDVdKTtcbml0ZXJhdG9yLm1hcEl0ZXJhdG9yKGZ1bmN0aW9uIChuKSB7XG4gICAgY29uc29sZS5sb2coJ3Byb2R1Y2luZycsIG4gKiAyKTtcbiAgICByZXR1cm4gbiAqIDI7XG59KVxuLmZpbHRlckl0ZXJhdG9yKGZ1bmN0aW9uIChuKSB7XG4gICAgaWYgKG4gJSAzKSB7XG4gICAgICAgIHJldHVybiBuO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdmaWx0ZXJpbmcnLCBuKTtcbiAgICB9XG59KVxuLmZvckVhY2goZnVuY3Rpb24gKG4pIHtcbiAgICBjb25zb2xlLmxvZygnY29uc3VtaW5nJywgbik7XG59KTtcblxubGlzdCA9IG5ldyBMaXN0KFsxLCAyLCAzLCA0LCA1XSk7XG52YXIgaXRlcmF0b3IgPSBsaXN0Lml0ZXJhdGUoKTtcbmNvbnNvbGUubG9nKGl0ZXJhdG9yLm5leHQoKSk7XG5pdGVyYXRvciA9IG5ldyBJdGVyYXRvcihpdGVyYXRvcik7XG5jb25zb2xlLmxvZyhpdGVyYXRvci5uZXh0KCkpO1xuY29uc29sZS5sb2coaXRlcmF0b3Iuc3VtKCkpO1xuXG5saXN0ID0gbmV3IExpc3QoWzEsIDIsIDMsIDQsIDVdKTtcbnZhciBpdGVyYXRvciA9IG5ldyBJdGVyYXRvcihsaXN0KTtcbmNvbnNvbGUubG9nKGl0ZXJhdG9yLm5leHQoKSk7XG5pdGVyYXRvciA9IG5ldyBJdGVyYXRvcihpdGVyYXRvcik7XG5jb25zb2xlLmxvZyhpdGVyYXRvci5uZXh0KCkpO1xuY29uc29sZS5sb2coaXRlcmF0b3IuYXZlcmFnZSgpKTtcblxuY29uc29sZS5sb2coSXRlcmF0b3IoW1sxLCAyXSwgWzMsIDRdXSkuZmxhdHRlbigpKVxuXG5jb25zb2xlLmxvZyhJdGVyYXRvcihbMSwgMiwgMywgNF0pLm1heCgpKTtcblxuY29uc29sZS5sb2coSXRlcmF0b3IoXCJhYmNcIikuc3VtKFwiXCIpKTtcblxuIl19