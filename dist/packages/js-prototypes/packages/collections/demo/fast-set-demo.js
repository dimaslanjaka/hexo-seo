"use strict";
var Set = require("../fast-set");
var Iterator = require("../iterator");
console.log("\nignore non-unique values");
var set = new Set([1, 1, 1, 2, 2, 2, 1, 2]);
console.log(set.toArray());
console.log("\nadd");
set.add(3);
console.log(set.toArray());
console.log("\ndelete");
set.delete(1);
console.log(set.toArray());
console.log("\nreducible");
console.log("length", set.length);
console.log("min", set.min());
console.log("max", set.max());
console.log("sum", set.sum());
console.log("average", set.average());
console.log("\nmap");
console.log(set.map(function (n) {
    return n + 1;
}));
console.log('\nhashable objects');
function Item(key, value) {
    this.key = key;
    this.value = value;
}
Item.prototype.hash = function () {
    return '' + this.key;
};
var set = new Set();
set.add(new Item(1, 'a'));
set.add(new Item(3, 'b'));
set.add(new Item(2, 'c'));
set.add(new Item(2, 'd'));
console.log(Object.keys(set.buckets));
set.log();
console.log("\niterate");
console.log(Iterator(set.iterate()).mapIterator(function (item) {
    return item.value;
}).toArray());
console.log(new Set([3, 2, 1]).concat([4, 5, 6]).toArray());
//console.log(new Set([1, 2, 3]).equals([1, 2, 3]));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFzdC1zZXQtZGVtby5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvanMtcHJvdG90eXBlcy9wYWNrYWdlcy9jb2xsZWN0aW9ucy9kZW1vL2Zhc3Qtc2V0LWRlbW8uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNqQyxJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFFdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0FBQzFDLElBQUksR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUUzQixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3JCLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBRTNCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDeEIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFFM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUMzQixPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFFdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDO0lBQzNCLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNqQixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBR0osT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBRWxDLFNBQVMsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLO0lBQ3BCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0lBQ2YsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDdkIsQ0FBQztBQUVELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHO0lBQ2xCLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7QUFDekIsQ0FBQyxDQUFDO0FBRUYsSUFBSSxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUNwQixHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzFCLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDMUIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUMxQixHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUN0QyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFVixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxVQUFVLElBQUk7SUFDMUQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ3RCLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFFZCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFBO0FBRTNELG9EQUFvRCIsInNvdXJjZXNDb250ZW50IjpbIlxudmFyIFNldCA9IHJlcXVpcmUoXCIuLi9mYXN0LXNldFwiKTtcbnZhciBJdGVyYXRvciA9IHJlcXVpcmUoXCIuLi9pdGVyYXRvclwiKTtcblxuY29uc29sZS5sb2coXCJcXG5pZ25vcmUgbm9uLXVuaXF1ZSB2YWx1ZXNcIik7XG52YXIgc2V0ID0gbmV3IFNldChbMSwgMSwgMSwgMiwgMiwgMiwgMSwgMl0pO1xuY29uc29sZS5sb2coc2V0LnRvQXJyYXkoKSk7XG5cbmNvbnNvbGUubG9nKFwiXFxuYWRkXCIpO1xuc2V0LmFkZCgzKTtcbmNvbnNvbGUubG9nKHNldC50b0FycmF5KCkpO1xuXG5jb25zb2xlLmxvZyhcIlxcbmRlbGV0ZVwiKTtcbnNldC5kZWxldGUoMSk7XG5jb25zb2xlLmxvZyhzZXQudG9BcnJheSgpKTtcblxuY29uc29sZS5sb2coXCJcXG5yZWR1Y2libGVcIik7XG5jb25zb2xlLmxvZyhcImxlbmd0aFwiLCBzZXQubGVuZ3RoKTtcbmNvbnNvbGUubG9nKFwibWluXCIsIHNldC5taW4oKSk7XG5jb25zb2xlLmxvZyhcIm1heFwiLCBzZXQubWF4KCkpO1xuY29uc29sZS5sb2coXCJzdW1cIiwgc2V0LnN1bSgpKTtcbmNvbnNvbGUubG9nKFwiYXZlcmFnZVwiLCBzZXQuYXZlcmFnZSgpKTtcblxuY29uc29sZS5sb2coXCJcXG5tYXBcIik7XG5jb25zb2xlLmxvZyhzZXQubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIG4gKyAxO1xufSkpO1xuXG5cbmNvbnNvbGUubG9nKCdcXG5oYXNoYWJsZSBvYmplY3RzJyk7XG5cbmZ1bmN0aW9uIEl0ZW0oa2V5LCB2YWx1ZSkge1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbn1cblxuSXRlbS5wcm90b3R5cGUuaGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJycgKyB0aGlzLmtleTtcbn07XG5cbnZhciBzZXQgPSBuZXcgU2V0KCk7XG5zZXQuYWRkKG5ldyBJdGVtKDEsICdhJykpO1xuc2V0LmFkZChuZXcgSXRlbSgzLCAnYicpKTtcbnNldC5hZGQobmV3IEl0ZW0oMiwgJ2MnKSk7XG5zZXQuYWRkKG5ldyBJdGVtKDIsICdkJykpO1xuY29uc29sZS5sb2coT2JqZWN0LmtleXMoc2V0LmJ1Y2tldHMpKTtcbnNldC5sb2coKTtcblxuY29uc29sZS5sb2coXCJcXG5pdGVyYXRlXCIpO1xuY29uc29sZS5sb2coSXRlcmF0b3Ioc2V0Lml0ZXJhdGUoKSkubWFwSXRlcmF0b3IoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbS52YWx1ZTtcbn0pLnRvQXJyYXkoKSk7XG5cbmNvbnNvbGUubG9nKG5ldyBTZXQoWzMsIDIsIDFdKS5jb25jYXQoWzQsIDUsIDZdKS50b0FycmF5KCkpXG5cbi8vY29uc29sZS5sb2cobmV3IFNldChbMSwgMiwgM10pLmVxdWFscyhbMSwgMiwgM10pKTtcblxuIl19