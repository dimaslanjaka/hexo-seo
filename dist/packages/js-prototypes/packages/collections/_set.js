"use strict";
var Shim = require("./shim");
var GenericCollection = require("./generic-collection");
var GenericSet = require("./generic-set");
var Set, GlobalSet, CollectionsSet;
if ((global.Set !== void 0) && (typeof global.Set.prototype.values === "function")) {
    GlobalSet = module.exports = global.Set;
    GlobalSet.Set = GlobalSet; // hack so require("set").Set will work in MontageJS
    GlobalSet.prototype.reduce = function (callback, basis /*, thisp*/) {
        var thisp = arguments[2];
        this.forEach(function (value) {
            basis = callback.call(thisp, basis, value, this);
        });
        return basis;
    };
    GlobalSet.prototype.reduceRight = function (callback, basis /*, thisp*/) {
        var thisp = arguments[2];
        var setIterator = this.values();
        var size = this.size;
        var reverseOrder = new Array(this.size);
        var value, i = size;
        // Fill 'reverseOrder' with values of Set in inverted order.
        while ((value = setIterator.next().value)) {
            reverseOrder[--i] = value;
        }
        // Iterate over reversed values and callback.
        while (i < size) {
            basis = callback.call(thisp, basis, reverseOrder[i++], this);
        }
        return basis;
    };
    GlobalSet.prototype.equals = function (that, equals) {
        var self = this;
        return (that && typeof that.reduce === "function" &&
            this.size === (that.size || that.length) &&
            that.reduce(function (equal, value) {
                return equal && self.has(value, equals);
            }, true));
    };
    GlobalSet.prototype.constructClone = function (values) {
        return new this.constructor(values, this.contentEquals, this.contentHash, this.getDefault);
    };
    GlobalSet.prototype.toJSON = function () {
        return this.entriesArray();
    };
    GlobalSet.prototype.one = function () {
        if (this.size > 0) {
            return this.values().next().value;
        }
        return undefined;
    };
    GlobalSet.prototype.pop = function () {
        if (this.size) {
            var setIterator = this.values(), aValue, value;
            while (aValue = setIterator.next().value) {
                value = aValue;
            }
            this["delete"](value, this.size - 1);
            return value;
        }
    };
    GlobalSet.prototype.shift = function () {
        if (this.size) {
            var firstValue = this.values().next().value;
            this["delete"](firstValue, 0);
            return firstValue;
        }
    };
    //Backward compatibility:
    Object.defineProperty(GlobalSet.prototype, "length", {
        get: function () {
            return this.size;
        },
        enumerable: true,
        configurable: true
    });
    GlobalSet.from = function (value) {
        var result = (new this);
        result.addEach(value);
        return result;
    };
    Object.addEach(GlobalSet.prototype, GenericCollection.prototype, false);
    Object.addEach(GlobalSet.prototype, GenericSet.prototype, false);
}
var List = require("./_list");
var FastSet = require("./_fast-set");
var Iterator = require("./iterator");
CollectionsSet = function CollectionsSet(values, equals, hash, getDefault) {
    return CollectionsSet._init(CollectionsSet, this, values, equals, hash, getDefault);
};
CollectionsSet._init = function (constructor, object, values, equals, hash, getDefault) {
    if (!(object instanceof constructor)) {
        return new constructor(values, equals, hash, getDefault);
    }
    equals = equals || Object.equals;
    hash = hash || Object.hash;
    getDefault = getDefault || Function.noop;
    object.contentEquals = equals;
    object.contentHash = hash;
    object.getDefault = getDefault;
    // a list of values in insertion order, used for all operations that depend
    // on iterating in insertion order
    object.order = new object.Order(undefined, equals);
    // a set of nodes from the order list, indexed by the corresponding value,
    // used for all operations that need to quickly seek  value in the list
    object.store = new object.Store(undefined, function (a, b) {
        return equals(a.value, b.value);
    }, function (node) {
        return hash(node.value);
    });
    object.length = 0;
    object.addEach(values);
};
CollectionsSet.Set = CollectionsSet; // hack so require("set").Set will work in MontageJS
CollectionsSet.CollectionsSet = CollectionsSet;
Object.addEach(CollectionsSet.prototype, GenericCollection.prototype);
Object.addEach(CollectionsSet.prototype, GenericSet.prototype);
CollectionsSet.from = GenericCollection.from;
Object.defineProperty(CollectionsSet.prototype, "size", GenericCollection._sizePropertyDescriptor);
//Overrides for consistency:
// Set.prototype.forEach = GenericCollection.prototype.forEach;
CollectionsSet.prototype.Order = List;
CollectionsSet.prototype.Store = FastSet;
CollectionsSet.prototype.constructClone = function (values) {
    return new this.constructor(values, this.contentEquals, this.contentHash, this.getDefault);
};
CollectionsSet.prototype.has = function (value) {
    var node = new this.order.Node(value);
    return this.store.has(node);
};
CollectionsSet.prototype.get = function (value, equals) {
    if (equals) {
        throw new Error("Set#get does not support second argument: equals");
    }
    var node = new this.order.Node(value);
    node = this.store.get(node);
    if (node) {
        return node.value;
    }
    else {
        return this.getDefault(value);
    }
};
CollectionsSet.prototype.add = function (value) {
    var node = new this.order.Node(value);
    if (!this.store.has(node)) {
        var index = this.length;
        this.order.add(value);
        node = this.order.head.prev;
        this.store.add(node);
        this.length++;
        return true;
    }
    return false;
};
CollectionsSet.prototype["delete"] = function (value, equals) {
    if (equals) {
        throw new Error("Set#delete does not support second argument: equals");
    }
    var node = new this.order.Node(value);
    if (this.store.has(node)) {
        node = this.store.get(node);
        this.store["delete"](node); // removes from the set
        this.order.splice(node, 1); // removes the node from the list
        this.length--;
        return true;
    }
    return false;
};
CollectionsSet.prototype.pop = function () {
    if (this.length) {
        var result = this.order.head.prev.value;
        this["delete"](result);
        return result;
    }
};
CollectionsSet.prototype.shift = function () {
    if (this.length) {
        var result = this.order.head.next.value;
        this["delete"](result);
        return result;
    }
};
CollectionsSet.prototype.one = function () {
    if (this.length > 0) {
        return this.store.one().value;
    }
};
CollectionsSet.prototype.clear = function () {
    this.store.clear();
    this.order.clear();
    this.length = 0;
};
Object.defineProperty(CollectionsSet.prototype, "_clear", {
    value: CollectionsSet.prototype.clear
});
CollectionsSet.prototype.reduce = function (callback, basis /*, thisp*/) {
    var thisp = arguments[2];
    var list = this.order;
    var index = 0;
    return list.reduce(function (basis, value) {
        return callback.call(thisp, basis, value, index++, this);
    }, basis, this);
};
CollectionsSet.prototype.reduceRight = function (callback, basis /*, thisp*/) {
    var thisp = arguments[2];
    var list = this.order;
    var index = this.length - 1;
    return list.reduceRight(function (basis, value) {
        return callback.call(thisp, basis, value, index--, this);
    }, basis, this);
};
CollectionsSet.prototype.iterate = function () {
    return this.order.iterate();
};
CollectionsSet.prototype.values = function () {
    return new Iterator(this.valuesArray(), true);
};
CollectionsSet.prototype.log = function () {
    var set = this.store;
    return set.log.apply(set, arguments);
};
if (!GlobalSet) {
    module.exports = CollectionsSet;
}
else {
    GlobalSet.prototype.valuesArray = GenericSet.prototype.valuesArray;
    GlobalSet.prototype.entriesArray = GenericSet.prototype.entriesArray;
    module.exports = GlobalSet;
    GlobalSet.CollectionsSet = CollectionsSet;
}
//# sourceMappingURL=data:application/json;base64,