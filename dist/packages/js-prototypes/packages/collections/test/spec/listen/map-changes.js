"use strict";
module.exports = describeMapChanges;
function describeMapChanges(Map) {
    it("should dispatch addition", function () {
        var map = new Map();
        var spy = jasmine.createSpy();
        map.addBeforeMapChangeListener(function (value, key) {
            spy('before', key, value);
        });
        map.addMapChangeListener(function (value, key) {
            spy('after', key, value);
        });
        map.set(0, 10);
        var argsForCall = spy.calls.all().map(function (call) { return call.args; });
        expect(argsForCall).toEqual([
            ['before', 0, undefined],
            ['after', 0, 10]
        ]);
    });
    it("should dispatch alteration", function () {
        var map = new Map([[0, 10]]);
        var spy = jasmine.createSpy();
        map.addBeforeMapChangeListener(function (value, key) {
            spy('before', key, value);
        });
        map.addMapChangeListener(function (value, key) {
            spy('after', key, value);
        });
        map.set(0, 20);
        var argsForCall = spy.calls.all().map(function (call) { return call.args; });
        expect(argsForCall).toEqual([
            ['before', 0, 10],
            ['after', 0, 20]
        ]);
    });
    xit("should dispatch deletion", function () {
        var map = new Map([[0, 20]]);
        // Arrays do not behave like maps for deletion.
        if (Array.isArray(map)) {
            return;
        }
        var spy = jasmine.createSpy();
        map.addBeforeMapChangeListener(function (value, key) {
            spy('before', key, value);
        });
        map.addMapChangeListener(function (value, key) {
            spy('after', key, value);
        });
        map.delete(0);
        var argsForCall = spy.calls.all().map(function (call) { return call.args; });
        expect(argsForCall).toEqual([
            ['before', 0, 20],
            ['after', 0, undefined]
        ]);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLWNoYW5nZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL2pzLXByb3RvdHlwZXMvcGFja2FnZXMvY29sbGVjdGlvbnMvdGVzdC9zcGVjL2xpc3Rlbi9tYXAtY2hhbmdlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsTUFBTSxDQUFDLE9BQU8sR0FBRyxrQkFBa0IsQ0FBQztBQUNwQyxTQUFTLGtCQUFrQixDQUFDLEdBQUc7SUFFM0IsRUFBRSxDQUFDLDBCQUEwQixFQUFFO1FBQzNCLElBQUksR0FBRyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7UUFDcEIsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzlCLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxVQUFVLEtBQUssRUFBRSxHQUFHO1lBQy9DLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsR0FBRyxDQUFDLG9CQUFvQixDQUFDLFVBQVUsS0FBSyxFQUFFLEdBQUc7WUFDekMsR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDN0IsQ0FBQyxDQUFDLENBQUM7UUFDSCxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVmLElBQUksV0FBVyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSSxJQUFJLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVFLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDeEIsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLFNBQVMsQ0FBQztZQUN4QixDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1NBQ25CLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDRCQUE0QixFQUFFO1FBQzdCLElBQUksR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdCLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUM5QixHQUFHLENBQUMsMEJBQTBCLENBQUMsVUFBVSxLQUFLLEVBQUUsR0FBRztZQUMvQyxHQUFHLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FBQztRQUNILEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLEtBQUssRUFBRSxHQUFHO1lBQ3pDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFZixJQUFJLFdBQVcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksSUFBSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1RSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxDQUFDO1lBQ3hCLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDakIsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztTQUNuQixDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUVILEdBQUcsQ0FBQywwQkFBMEIsRUFBRTtRQUM1QixJQUFJLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QiwrQ0FBK0M7UUFDL0MsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3BCLE9BQU87U0FDVjtRQUNELElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUM5QixHQUFHLENBQUMsMEJBQTBCLENBQUMsVUFBVSxLQUFLLEVBQUUsR0FBRztZQUMvQyxHQUFHLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FBQztRQUNILEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLEtBQUssRUFBRSxHQUFHO1lBQ3pDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVkLElBQUksV0FBVyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSSxJQUFJLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVFLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDeEIsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUNqQixDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDO1NBQzFCLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBRVAsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxubW9kdWxlLmV4cG9ydHMgPSBkZXNjcmliZU1hcENoYW5nZXM7XG5mdW5jdGlvbiBkZXNjcmliZU1hcENoYW5nZXMoTWFwKSB7XG5cbiAgICBpdChcInNob3VsZCBkaXNwYXRjaCBhZGRpdGlvblwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBtYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIHZhciBzcHkgPSBqYXNtaW5lLmNyZWF0ZVNweSgpO1xuICAgICAgICBtYXAuYWRkQmVmb3JlTWFwQ2hhbmdlTGlzdGVuZXIoZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgIHNweSgnYmVmb3JlJywga2V5LCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBtYXAuYWRkTWFwQ2hhbmdlTGlzdGVuZXIoZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgIHNweSgnYWZ0ZXInLCBrZXksIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIG1hcC5zZXQoMCwgMTApO1xuXG4gICAgICAgIHZhciBhcmdzRm9yQ2FsbCA9IHNweS5jYWxscy5hbGwoKS5tYXAoZnVuY3Rpb24gKGNhbGwpIHsgcmV0dXJuIGNhbGwuYXJncyB9KTtcbiAgICAgICAgZXhwZWN0KGFyZ3NGb3JDYWxsKS50b0VxdWFsKFtcbiAgICAgICAgICAgIFsnYmVmb3JlJywgMCwgdW5kZWZpbmVkXSxcbiAgICAgICAgICAgIFsnYWZ0ZXInLCAwLCAxMF1cbiAgICAgICAgXSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBkaXNwYXRjaCBhbHRlcmF0aW9uXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG1hcCA9IG5ldyBNYXAoW1swLCAxMF1dKTtcbiAgICAgICAgdmFyIHNweSA9IGphc21pbmUuY3JlYXRlU3B5KCk7XG4gICAgICAgIG1hcC5hZGRCZWZvcmVNYXBDaGFuZ2VMaXN0ZW5lcihmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgICAgc3B5KCdiZWZvcmUnLCBrZXksIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIG1hcC5hZGRNYXBDaGFuZ2VMaXN0ZW5lcihmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgICAgc3B5KCdhZnRlcicsIGtleSwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgbWFwLnNldCgwLCAyMCk7XG5cbiAgICAgICAgdmFyIGFyZ3NGb3JDYWxsID0gc3B5LmNhbGxzLmFsbCgpLm1hcChmdW5jdGlvbiAoY2FsbCkgeyByZXR1cm4gY2FsbC5hcmdzIH0pO1xuICAgICAgICBleHBlY3QoYXJnc0ZvckNhbGwpLnRvRXF1YWwoW1xuICAgICAgICAgICAgWydiZWZvcmUnLCAwLCAxMF0sXG4gICAgICAgICAgICBbJ2FmdGVyJywgMCwgMjBdXG4gICAgICAgIF0pO1xuICAgIH0pO1xuXG4gICAgeGl0KFwic2hvdWxkIGRpc3BhdGNoIGRlbGV0aW9uXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG1hcCA9IG5ldyBNYXAoW1swLCAyMF1dKTtcbiAgICAgICAgLy8gQXJyYXlzIGRvIG5vdCBiZWhhdmUgbGlrZSBtYXBzIGZvciBkZWxldGlvbi5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobWFwKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzcHkgPSBqYXNtaW5lLmNyZWF0ZVNweSgpO1xuICAgICAgICBtYXAuYWRkQmVmb3JlTWFwQ2hhbmdlTGlzdGVuZXIoZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgIHNweSgnYmVmb3JlJywga2V5LCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBtYXAuYWRkTWFwQ2hhbmdlTGlzdGVuZXIoZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgIHNweSgnYWZ0ZXInLCBrZXksIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIG1hcC5kZWxldGUoMCk7XG5cbiAgICAgICAgdmFyIGFyZ3NGb3JDYWxsID0gc3B5LmNhbGxzLmFsbCgpLm1hcChmdW5jdGlvbiAoY2FsbCkgeyByZXR1cm4gY2FsbC5hcmdzIH0pO1xuICAgICAgICBleHBlY3QoYXJnc0ZvckNhbGwpLnRvRXF1YWwoW1xuICAgICAgICAgICAgWydiZWZvcmUnLCAwLCAyMF0sXG4gICAgICAgICAgICBbJ2FmdGVyJywgMCwgdW5kZWZpbmVkXVxuICAgICAgICBdKTtcbiAgICB9KTtcblxufVxuIl19