"use strict";
var LruSet = require("collections/lru-set");
var describeCollection = require("./collection");
var describeSet = require("./set");
var describeToJson = require("./to-json");
describe("LruSet-spec", function () {
    // construction, has, add, get, delete
    describeCollection(LruSet, [1, 2, 3, 4], true);
    describeCollection(LruSet, [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }], true);
    describeSet(LruSet);
    describeToJson(LruSet, [1, 2, 3, 4]);
    it("should remove stale entries", function () {
        var set = LruSet([4, 3, 1, 2, 3], 3);
        expect(set.length).toBe(3);
        set.add(3);
        expect(set.toArray()).toEqual([1, 2, 3]);
        set.add(4);
        expect(set.toArray()).toEqual([2, 3, 4]);
    });
    it("should emit LRU changes as singleton operation", function () {
        var a = 1, b = 2, c = 3, d = 4;
        var lruset = LruSet([d, c, a, b, c], 3);
        lruset.addRangeChangeListener(function (plus, minus) {
            expect(plus).toEqual([d]);
            expect(minus).toEqual([a]);
        });
        expect(lruset.add(d)).toBe(false);
    });
    it("should dispatch LRU changes as singleton operation", function () {
        var set = LruSet([4, 3, 1, 2, 3], 3);
        var spy = jasmine.createSpy();
        set.addBeforeRangeChangeListener(function (plus, minus) {
            spy('before-plus', plus);
            spy('before-minus', minus);
        });
        set.addRangeChangeListener(function (plus, minus) {
            spy('after-plus', plus);
            spy('after-minus', minus);
        });
        expect(set.add(4)).toBe(false);
        var argsForCall = spy.calls.all().map(function (call) { return call.args; });
        expect(argsForCall).toEqual([
            ['before-plus', [4]],
            ['before-minus', [1]],
            ['after-plus', [4]],
            ['after-minus', [1]]
        ]);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHJ1LXNldC1zcGVjLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9qcy1wcm90b3R5cGVzL3BhY2thZ2VzL2NvbGxlY3Rpb25zL3Rlc3Qvc3BlYy9scnUtc2V0LXNwZWMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQzVDLElBQUksa0JBQWtCLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ2pELElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNuQyxJQUFJLGNBQWMsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFFMUMsUUFBUSxDQUFDLGFBQWEsRUFBRTtJQUVwQixzQ0FBc0M7SUFDdEMsa0JBQWtCLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDL0Msa0JBQWtCLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUUsQ0FBQyxFQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2RSxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEIsY0FBYyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFckMsRUFBRSxDQUFDLDZCQUE2QixFQUFFO1FBQzlCLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FB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QUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUE7QUFDTixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxudmFyIExydVNldCA9IHJlcXVpcmUoXCJjb2xsZWN0aW9ucy9scnUtc2V0XCIpO1xudmFyIGRlc2NyaWJlQ29sbGVjdGlvbiA9IHJlcXVpcmUoXCIuL2NvbGxlY3Rpb25cIik7XG52YXIgZGVzY3JpYmVTZXQgPSByZXF1aXJlKFwiLi9zZXRcIik7XG52YXIgZGVzY3JpYmVUb0pzb24gPSByZXF1aXJlKFwiLi90by1qc29uXCIpO1xuXG5kZXNjcmliZShcIkxydVNldC1zcGVjXCIsIGZ1bmN0aW9uICgpIHtcblxuICAgIC8vIGNvbnN0cnVjdGlvbiwgaGFzLCBhZGQsIGdldCwgZGVsZXRlXG4gICAgZGVzY3JpYmVDb2xsZWN0aW9uKExydVNldCwgWzEsIDIsIDMsIDRdLCB0cnVlKTtcbiAgICBkZXNjcmliZUNvbGxlY3Rpb24oTHJ1U2V0LCBbe2lkOiAwfSwge2lkOiAxfSwge2lkOiAyfSwge2lkOiAzfV0sIHRydWUpO1xuICAgIGRlc2NyaWJlU2V0KExydVNldCk7XG4gICAgZGVzY3JpYmVUb0pzb24oTHJ1U2V0LCBbMSwgMiwgMywgNF0pO1xuXG4gICAgaXQoXCJzaG91bGQgcmVtb3ZlIHN0YWxlIGVudHJpZXNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2V0ID0gTHJ1U2V0KFs0LCAzLCAxLCAyLCAzXSwgMyk7XG4gICAgICAgIGV4cGVjdChzZXQubGVuZ3RoKS50b0JlKDMpO1xuICAgICAgICBzZXQuYWRkKDMpO1xuICAgICAgICBleHBlY3Qoc2V0LnRvQXJyYXkoKSkudG9FcXVhbChbMSwgMiwgM10pO1xuICAgICAgICBzZXQuYWRkKDQpO1xuICAgICAgICBleHBlY3Qoc2V0LnRvQXJyYXkoKSkudG9FcXVhbChbMiwgMywgNF0pO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgZW1pdCBMUlUgY2hhbmdlcyBhcyBzaW5nbGV0b24gb3BlcmF0aW9uXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGEgPSAxLCBiID0gMiwgYyA9IDMsIGQgPSA0O1xuICAgICAgICB2YXIgbHJ1c2V0ID0gTHJ1U2V0KFtkLCBjLCBhLCBiLCBjXSwgMyk7XG4gICAgICAgIGxydXNldC5hZGRSYW5nZUNoYW5nZUxpc3RlbmVyKGZ1bmN0aW9uKHBsdXMsIG1pbnVzKSB7XG4gICAgICAgICAgICBleHBlY3QocGx1cykudG9FcXVhbChbZF0pO1xuICAgICAgICAgICAgZXhwZWN0KG1pbnVzKS50b0VxdWFsKFthXSk7XG4gICAgICAgIH0pO1xuICAgICAgICBleHBlY3QobHJ1c2V0LmFkZChkKSkudG9CZShmYWxzZSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBkaXNwYXRjaCBMUlUgY2hhbmdlcyBhcyBzaW5nbGV0b24gb3BlcmF0aW9uXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNldCA9IExydVNldChbNCwgMywgMSwgMiwgM10sIDMpO1xuICAgICAgICB2YXIgc3B5ID0gamFzbWluZS5jcmVhdGVTcHkoKTtcbiAgICAgICAgc2V0LmFkZEJlZm9yZVJhbmdlQ2hhbmdlTGlzdGVuZXIoZnVuY3Rpb24gKHBsdXMsIG1pbnVzKSB7XG4gICAgICAgICAgICBzcHkoJ2JlZm9yZS1wbHVzJywgcGx1cyk7XG4gICAgICAgICAgICBzcHkoJ2JlZm9yZS1taW51cycsIG1pbnVzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNldC5hZGRSYW5nZUNoYW5nZUxpc3RlbmVyKGZ1bmN0aW9uIChwbHVzLCBtaW51cykge1xuICAgICAgICAgICAgc3B5KCdhZnRlci1wbHVzJywgcGx1cyk7XG4gICAgICAgICAgICBzcHkoJ2FmdGVyLW1pbnVzJywgbWludXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgZXhwZWN0KHNldC5hZGQoNCkpLnRvQmUoZmFsc2UpO1xuXG4gICAgICAgIHZhciBhcmdzRm9yQ2FsbCA9IHNweS5jYWxscy5hbGwoKS5tYXAoZnVuY3Rpb24gKGNhbGwpIHsgcmV0dXJuIGNhbGwuYXJncyB9KTtcbiAgICAgICAgZXhwZWN0KGFyZ3NGb3JDYWxsKS50b0VxdWFsKFtcbiAgICAgICAgICAgIFsnYmVmb3JlLXBsdXMnLCBbNF1dLFxuICAgICAgICAgICAgWydiZWZvcmUtbWludXMnLCBbMV1dLFxuICAgICAgICAgICAgWydhZnRlci1wbHVzJywgWzRdXSxcbiAgICAgICAgICAgIFsnYWZ0ZXItbWludXMnLCBbMV1dXG4gICAgICAgIF0pO1xuICAgIH0pXG59KTtcbiJdfQ==