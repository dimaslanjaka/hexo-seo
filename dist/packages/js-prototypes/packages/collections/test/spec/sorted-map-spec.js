"use strict";
var SortedMap = require("collections/sorted-map");
var describeDict = require("./dict");
var describeToJson = require("./to-json");
describe("SortedMap-spec", function () {
    describeDict(SortedMap);
    describeToJson(SortedMap, [[1, 10], [2, 20], [3, 30]]);
    it("should reduceRight", function () {
        var map = SortedMap([
            [1, 2],
            [2, 4],
            [3, 6],
            [4, 8]
        ]);
        expect(map.reduceRight(function (valid, value, key) {
            return valid && key * 2 == value;
        }, true)).toBe(true);
    });
    it("should iterate", function () {
        var map = SortedMap([
            [1, 2],
            [2, 4],
            [3, 6],
            [4, 8]
        ]);
        var iterator = map.iterator();
        var a = iterator.next().value, b = iterator.next().value, c = iterator.next().value, d = iterator.next().value;
        expect(a.key).toEqual(1);
        expect(a.value).toEqual(2);
        expect(b.key).toEqual(2);
        expect(b.value).toEqual(4);
        expect(c.key).toEqual(3);
        expect(c.value).toEqual(6);
        expect(d.key).toEqual(4);
        expect(d.value).toEqual(8);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydGVkLW1hcC1zcGVjLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9qcy1wcm90b3R5cGVzL3BhY2thZ2VzL2NvbGxlY3Rpb25zL3Rlc3Qvc3BlYy9zb3J0ZWQtbWFwLXNwZWMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQ2xELElBQUksWUFBWSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNyQyxJQUFJLGNBQWMsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFFMUMsUUFBUSxDQUFDLGdCQUFnQixFQUFFO0lBQ3ZCLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN4QixjQUFjLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXZELEVBQUUsQ0FBQyxvQkFBb0IsRUFBRTtRQUNyQixJQUFJLEdBQUcsR0FBRyxTQUFTLENBQUM7WUFDaEIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ04sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ04sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ04sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ1QsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsVUFBVSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUc7WUFDOUMsT0FBTyxLQUFLLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUM7UUFDckMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pCLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGdCQUFnQixFQUFFO1FBQ2pCLElBQUksR0FBRyxHQUFHLFNBQVMsQ0FBQztZQUNoQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDTixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDTixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDTixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDVCxDQUFDLENBQUM7UUFDSCxJQUFJLFFBQVEsR0FBRyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDOUIsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssRUFDekIsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQ3pCLENBQUMsR0FBRyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUN6QixDQUFDLEdBQUcsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQztRQUM5QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgU29ydGVkTWFwID0gcmVxdWlyZShcImNvbGxlY3Rpb25zL3NvcnRlZC1tYXBcIik7XG52YXIgZGVzY3JpYmVEaWN0ID0gcmVxdWlyZShcIi4vZGljdFwiKTtcbnZhciBkZXNjcmliZVRvSnNvbiA9IHJlcXVpcmUoXCIuL3RvLWpzb25cIik7XG5cbmRlc2NyaWJlKFwiU29ydGVkTWFwLXNwZWNcIiwgZnVuY3Rpb24gKCkge1xuICAgIGRlc2NyaWJlRGljdChTb3J0ZWRNYXApO1xuICAgIGRlc2NyaWJlVG9Kc29uKFNvcnRlZE1hcCwgW1sxLCAxMF0sIFsyLCAyMF0sIFszLCAzMF1dKTtcblxuICAgIGl0KFwic2hvdWxkIHJlZHVjZVJpZ2h0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG1hcCA9IFNvcnRlZE1hcChbXG4gICAgICAgICAgICBbMSwgMl0sXG4gICAgICAgICAgICBbMiwgNF0sXG4gICAgICAgICAgICBbMywgNl0sXG4gICAgICAgICAgICBbNCwgOF1cbiAgICAgICAgXSk7XG4gICAgICAgIGV4cGVjdChtYXAucmVkdWNlUmlnaHQoZnVuY3Rpb24gKHZhbGlkLCB2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsaWQgJiYga2V5ICogMiA9PSB2YWx1ZTtcbiAgICAgICAgfSwgdHJ1ZSkpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBpdGVyYXRlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG1hcCA9IFNvcnRlZE1hcChbXG4gICAgICAgICAgICBbMSwgMl0sXG4gICAgICAgICAgICBbMiwgNF0sXG4gICAgICAgICAgICBbMywgNl0sXG4gICAgICAgICAgICBbNCwgOF1cbiAgICAgICAgXSk7XG4gICAgICAgIHZhciBpdGVyYXRvciA9IG1hcC5pdGVyYXRvcigpO1xuICAgICAgICB2YXIgYSA9IGl0ZXJhdG9yLm5leHQoKS52YWx1ZSxcbiAgICAgICAgICAgIGIgPSBpdGVyYXRvci5uZXh0KCkudmFsdWUsXG4gICAgICAgICAgICBjID0gaXRlcmF0b3IubmV4dCgpLnZhbHVlLFxuICAgICAgICAgICAgZCA9IGl0ZXJhdG9yLm5leHQoKS52YWx1ZTtcbiAgICAgICAgZXhwZWN0KGEua2V5KS50b0VxdWFsKDEpO1xuICAgICAgICBleHBlY3QoYS52YWx1ZSkudG9FcXVhbCgyKTtcbiAgICAgICAgZXhwZWN0KGIua2V5KS50b0VxdWFsKDIpO1xuICAgICAgICBleHBlY3QoYi52YWx1ZSkudG9FcXVhbCg0KTtcbiAgICAgICAgZXhwZWN0KGMua2V5KS50b0VxdWFsKDMpO1xuICAgICAgICBleHBlY3QoYy52YWx1ZSkudG9FcXVhbCg2KTtcbiAgICAgICAgZXhwZWN0KGQua2V5KS50b0VxdWFsKDQpO1xuICAgICAgICBleHBlY3QoZC52YWx1ZSkudG9FcXVhbCg4KTtcbiAgICB9KTtcbn0pO1xuIl19