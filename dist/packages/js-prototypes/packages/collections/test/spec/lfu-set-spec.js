"use strict";
var LfuSet = require("collections/lfu-set");
var describeCollection = require("./collection");
var describeSet = require("./set");
var describeToJson = require("./to-json");
describe("LfuSet-spec", function () {
    // construction, has, add, get, delete
    describeCollection(LfuSet, [1, 2, 3, 4], true);
    describeCollection(LfuSet, [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }], true);
    describeSet(LfuSet);
    describeToJson(LfuSet, [1, 2, 3, 4]);
    it("should handle many repeated values", function () {
        var set = new LfuSet([1, 1, 1, 2, 2, 2, 1, 2]);
        expect(set.toArray()).toEqual([1, 2]);
    });
    it("should remove stale entries", function () {
        var set = LfuSet([3, 4, 1, 3, 2], 3);
        expect(set.length).toBe(3);
        expect(set.toArray()).toEqual([1, 2, 3]);
        set.add(4);
        expect(set.toArray()).toEqual([2, 4, 3]);
    });
    it("should emit LFU changes as singleton operation", function () {
        var a = 1, b = 2, c = 3, d = 4;
        var lfuset = LfuSet([d, c, a, b, c], 3);
        lfuset.addRangeChangeListener(function (plus, minus) {
            expect(plus).toEqual([d]);
            expect(minus).toEqual([a]);
        });
        expect(lfuset.add(d)).toBe(false);
    });
    it("should dispatch LRU changes as singleton operation", function () {
        var set = LfuSet([4, 3, 1, 2, 3], 3);
        var spy = jasmine.createSpy();
        set.addBeforeRangeChangeListener(function (plus, minus) {
            spy('before-plus', plus);
            spy('before-minus', minus);
        });
        set.addRangeChangeListener(function (plus, minus) {
            spy('after-plus', plus);
            spy('after-minus', minus);
        });
        expect(set.add(4)).toBe(false);
        var argsForCall = spy.calls.all().map(function (call) { return call.args; });
        expect(argsForCall).toEqual([
            ['before-plus', [4]],
            ['before-minus', [1]],
            ['after-plus', [4]],
            ['after-minus', [1]]
        ]);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGZ1LXNldC1zcGVjLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9qcy1wcm90b3R5cGVzL3BhY2thZ2VzL2NvbGxlY3Rpb25zL3Rlc3Qvc3BlYy9sZnUtc2V0LXNwZWMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQzVDLElBQUksa0JBQWtCLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ2pELElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNuQyxJQUFJLGNBQWMsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFFMUMsUUFBUSxDQUFDLGFBQWEsRUFBRTtJQUVwQixzQ0FBc0M7SUFDdEMsa0JBQWtCLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDL0Msa0JBQWtCLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUUsQ0FBQyxFQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2RSxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEIsY0FBYyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFckMsRUFBRSxDQUFDLG9DQUFvQyxFQUFFO1FBQ3JDLElBQUksR0FBRyxHQUFHLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FB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QUMsQ0FBQyxDQUFDO1FBQzVFLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDeEIsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQixDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkIsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN2QixDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQTtBQUNOLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsidmFyIExmdVNldCA9IHJlcXVpcmUoXCJjb2xsZWN0aW9ucy9sZnUtc2V0XCIpO1xudmFyIGRlc2NyaWJlQ29sbGVjdGlvbiA9IHJlcXVpcmUoXCIuL2NvbGxlY3Rpb25cIik7XG52YXIgZGVzY3JpYmVTZXQgPSByZXF1aXJlKFwiLi9zZXRcIik7XG52YXIgZGVzY3JpYmVUb0pzb24gPSByZXF1aXJlKFwiLi90by1qc29uXCIpO1xuXG5kZXNjcmliZShcIkxmdVNldC1zcGVjXCIsIGZ1bmN0aW9uICgpIHtcblxuICAgIC8vIGNvbnN0cnVjdGlvbiwgaGFzLCBhZGQsIGdldCwgZGVsZXRlXG4gICAgZGVzY3JpYmVDb2xsZWN0aW9uKExmdVNldCwgWzEsIDIsIDMsIDRdLCB0cnVlKTtcbiAgICBkZXNjcmliZUNvbGxlY3Rpb24oTGZ1U2V0LCBbe2lkOiAwfSwge2lkOiAxfSwge2lkOiAyfSwge2lkOiAzfV0sIHRydWUpO1xuICAgIGRlc2NyaWJlU2V0KExmdVNldCk7XG4gICAgZGVzY3JpYmVUb0pzb24oTGZ1U2V0LCBbMSwgMiwgMywgNF0pO1xuXG4gICAgaXQoXCJzaG91bGQgaGFuZGxlIG1hbnkgcmVwZWF0ZWQgdmFsdWVzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNldCA9IG5ldyBMZnVTZXQoWzEsIDEsIDEsIDIsIDIsIDIsIDEsIDJdKTtcbiAgICAgICAgZXhwZWN0KHNldC50b0FycmF5KCkpLnRvRXF1YWwoWzEsIDJdKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIHJlbW92ZSBzdGFsZSBlbnRyaWVzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNldCA9IExmdVNldChbMywgNCwgMSwgMywgMl0sIDMpO1xuXG4gICAgICAgIGV4cGVjdChzZXQubGVuZ3RoKS50b0JlKDMpO1xuICAgICAgICBleHBlY3Qoc2V0LnRvQXJyYXkoKSkudG9FcXVhbChbMSwgMiwgM10pO1xuICAgICAgICBzZXQuYWRkKDQpO1xuICAgICAgICBleHBlY3Qoc2V0LnRvQXJyYXkoKSkudG9FcXVhbChbMiwgNCwgM10pO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgZW1pdCBMRlUgY2hhbmdlcyBhcyBzaW5nbGV0b24gb3BlcmF0aW9uXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGEgPSAxLCBiID0gMiwgYyA9IDMsIGQgPSA0O1xuICAgICAgICB2YXIgbGZ1c2V0ID0gTGZ1U2V0KFtkLCBjLCBhLCBiLCBjXSwgMyk7XG4gICAgICAgIGxmdXNldC5hZGRSYW5nZUNoYW5nZUxpc3RlbmVyKGZ1bmN0aW9uKHBsdXMsIG1pbnVzKSB7XG4gICAgICAgICAgICBleHBlY3QocGx1cykudG9FcXVhbChbZF0pO1xuICAgICAgICAgICAgZXhwZWN0KG1pbnVzKS50b0VxdWFsKFthXSk7XG4gICAgICAgIH0pO1xuICAgICAgICBleHBlY3QobGZ1c2V0LmFkZChkKSkudG9CZShmYWxzZSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBkaXNwYXRjaCBMUlUgY2hhbmdlcyBhcyBzaW5nbGV0b24gb3BlcmF0aW9uXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNldCA9IExmdVNldChbNCwgMywgMSwgMiwgM10sIDMpO1xuICAgICAgICB2YXIgc3B5ID0gamFzbWluZS5jcmVhdGVTcHkoKTtcbiAgICAgICAgc2V0LmFkZEJlZm9yZVJhbmdlQ2hhbmdlTGlzdGVuZXIoZnVuY3Rpb24gKHBsdXMsIG1pbnVzKSB7XG4gICAgICAgICAgICBzcHkoJ2JlZm9yZS1wbHVzJywgcGx1cyk7XG4gICAgICAgICAgICBzcHkoJ2JlZm9yZS1taW51cycsIG1pbnVzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNldC5hZGRSYW5nZUNoYW5nZUxpc3RlbmVyKGZ1bmN0aW9uIChwbHVzLCBtaW51cykge1xuICAgICAgICAgICAgc3B5KCdhZnRlci1wbHVzJywgcGx1cyk7XG4gICAgICAgICAgICBzcHkoJ2FmdGVyLW1pbnVzJywgbWludXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgZXhwZWN0KHNldC5hZGQoNCkpLnRvQmUoZmFsc2UpO1xuXG4gICAgICAgIFxuICAgICAgICB2YXIgYXJnc0ZvckNhbGwgPSBzcHkuY2FsbHMuYWxsKCkubWFwKGZ1bmN0aW9uIChjYWxsKSB7IHJldHVybiBjYWxsLmFyZ3MgfSk7XG4gICAgICAgIGV4cGVjdChhcmdzRm9yQ2FsbCkudG9FcXVhbChbXG4gICAgICAgICAgICBbJ2JlZm9yZS1wbHVzJywgWzRdXSxcbiAgICAgICAgICAgIFsnYmVmb3JlLW1pbnVzJywgWzFdXSxcbiAgICAgICAgICAgIFsnYWZ0ZXItcGx1cycsIFs0XV0sXG4gICAgICAgICAgICBbJ2FmdGVyLW1pbnVzJywgWzFdXVxuICAgICAgICBdKTtcbiAgICB9KVxufSk7XG4iXX0=