"use strict";
// Describe Array, List, and SortedSet, all of which have the interface of a
// double-ended queue.  Array and List are proper queues since push and unshift
// put the values at the ends, but for sake of reusing these tests for
// SortedSet, all of these tests maintain the sorted order of the collection.
var fuzzDeque = require("./deque-fuzz").fuzzDeque;
module.exports = describeDeque;
function describeDeque(Deque) {
    describe("add(value)", function () {
        it("should be an alias for push", function () {
            var collection = Deque([1, 2, 3]);
            collection.add(4);
            expect(collection.toArray()).toEqual([1, 2, 3, 4]);
        });
    });
    describe("push(value)", function () {
        it("should add one value to the end", function () {
            var collection = Deque([1, 2, 3]);
            collection.push(4);
            expect(collection.toArray()).toEqual([1, 2, 3, 4]);
        });
    });
    describe("push(...values)", function () {
        it("should add many values to the end", function () {
            var collection = Deque([1, 2, 3]);
            collection.push(4, 5, 6);
            expect(collection.toArray()).toEqual([1, 2, 3, 4, 5, 6]);
        });
        it("should add many values to the end variadically", function () {
            var collection = Deque([1, 2, 3]);
            collection.push.apply(collection, [4, 5, 6]);
            expect(collection.toArray()).toEqual([1, 2, 3, 4, 5, 6]);
        });
    });
    describe("unshift(value)", function () {
        it("should add a value to the beginning", function () {
            var collection = Deque([1, 2, 3]);
            collection.unshift(0);
            expect(collection.toArray()).toEqual([0, 1, 2, 3]);
        });
    });
    describe("unshift(...values)", function () {
        it("should add many values to the beginning", function () {
            var collection = Deque([1, 2, 3]);
            collection.unshift(-2, -1, 0);
            expect(collection.toArray()).toEqual([-2, -1, 0, 1, 2, 3]);
        });
        it("should add many values to the beginning", function () {
            var collection = Deque([1, 2, 3]);
            collection.unshift.apply(collection, [-2, -1, 0]);
            expect(collection.toArray()).toEqual([-2, -1, 0, 1, 2, 3]);
        });
    });
    describe("pop", function () {
        it("should remove one value from the end and return it", function () {
            var collection = Deque([1, 2, 3]);
            expect(collection.pop()).toEqual(3);
            expect(collection.toArray()).toEqual([1, 2]);
        });
    });
    describe("shift", function () {
        it("should remove one value from the beginning and return it", function () {
            var collection = Deque([1, 2, 3]);
            expect(collection.shift()).toEqual(1);
            expect(collection.toArray()).toEqual([2, 3]);
        });
    });
    describe("concat", function () {
        it("should concatenate variadic mixed-type collections", function () {
            var collection = Deque([1, 2, 3]).concat([4, 5, 6], Deque([7, 8, 9]));
            expect(collection.toArray()).toEqual([1, 2, 3, 4, 5, 6, 7, 8, 9]);
        });
    });
    describe("slice", function () {
        if (!Deque.prototype.slice)
            return;
        var collection = Deque([1, 2, 3, 4]);
        it("should slice all values with no arguments", function () {
            expect(collection.slice()).toEqual([1, 2, 3, 4]);
        });
        it("should slice all after an index", function () {
            expect(collection.slice(2)).toEqual([3, 4]);
        });
        it("should slice from the middle by indexed positions", function () {
            expect(collection.slice(1, 3)).toEqual([2, 3]);
        });
        it("should slice from a negative index", function () {
            expect(collection.slice(-2)).toEqual([3, 4]);
        });
        it("should slice from a negative index to a positive", function () {
            expect(collection.slice(-2, 3)).toEqual([3]);
        });
        it("should slice from a negative index to a negative", function () {
            expect(collection.slice(-2, -1)).toEqual([3]);
        });
        // TODO
        /*
        it("should slice from a negative index to zero", function () {
            expect(collection.slice(-2, 0)).toEqual([]); // Array
            expect(collection.slice(-2, 0)).toEqual([3, 4]); // List
        });
        */
    });
    describe("splice", function () {
        if (!Deque.prototype.splice)
            return;
        it("should do nothing with no arguments", function () {
            var collection = Deque([1, 2, 3, 4]);
            expect(collection.splice()).toEqual([]);
            expect(collection.toArray()).toEqual([1, 2, 3, 4]);
        });
        it("should splice to end with only an offset argument", function () {
            var collection = Deque([1, 2, 3, 4]);
            expect(collection.splice(2)).toEqual([3, 4]);
            expect(collection.toArray()).toEqual([1, 2]);
        });
        it("should splice nothing with no length", function () {
            var collection = Deque([1, 2, 3, 4]);
            expect(collection.splice(2, 0)).toEqual([]);
            expect(collection.toArray()).toEqual([1, 2, 3, 4]);
        });
        it("should splice all values", function () {
            var collection = Deque([1, 2, 3, 4]);
            expect(collection.splice(0, collection.length)).toEqual([1, 2, 3, 4]);
            expect(collection.toArray()).toEqual([]);
        });
        it("should splice from negative offset", function () {
            var collection = Deque([1, 2, 3, 4]);
            expect(collection.splice(-2)).toEqual([3, 4]);
            expect(collection.toArray()).toEqual([1, 2]);
        });
        it("should inject values at a numeric offset", function () {
            var collection = Deque([1, 2, 5, 6]);
            expect(collection.splice(2, 0, 3, 4)).toEqual([]);
            expect(collection.toArray()).toEqual([1, 2, 3, 4, 5, 6]);
        });
        it("should replace values at a numeric offset", function () {
            var collection = Deque([1, 2, 3, 6]);
            expect(collection.splice(1, 2, 4, 5)).toEqual([2, 3]);
            expect(collection.toArray()).toEqual([1, 4, 5, 6]);
        });
        it("should inject values with implied position and length", function () {
            var collection = Deque([1, 2, 3, 4]);
            expect(collection.splice(null, null, -1, 0)).toEqual([]);
            expect(collection.toArray()).toEqual([-1, 0, 1, 2, 3, 4]);
        });
        it("should append values", function () {
            var collection = Deque([1, 2, 3, 4]);
            expect(collection.splice(4, 0, 5, 6)).toEqual([]);
            expect(collection.toArray()).toEqual([1, 2, 3, 4, 5, 6]);
        });
    });
    describe("swap", function () {
        if (!Deque.prototype.swap)
            return;
        it("should do nothing with no arguments", function () {
            var collection = Deque([1, 2, 3, 4]);
            expect(collection.swap()).toEqual([]);
            expect(collection.toArray()).toEqual([1, 2, 3, 4]);
        });
        it("should splice to end with only an offset argument", function () {
            var collection = Deque([1, 2, 3, 4]);
            expect(collection.swap(2)).toEqual([3, 4]);
            expect(collection.toArray()).toEqual([1, 2]);
        });
        it("should splice nothing with no length", function () {
            var collection = Deque([1, 2, 3, 4]);
            expect(collection.swap(2, 0)).toEqual([]);
            expect(collection.toArray()).toEqual([1, 2, 3, 4]);
        });
        it("should splice all values", function () {
            var collection = Deque([1, 2, 3, 4]);
            expect(collection.swap(0, collection.length)).toEqual([1, 2, 3, 4]);
            expect(collection.toArray()).toEqual([]);
        });
        it("should splice from negative offset", function () {
            var collection = Deque([1, 2, 3, 4]);
            expect(collection.swap(-2)).toEqual([3, 4]);
            expect(collection.toArray()).toEqual([1, 2]);
        });
        it("should inject values at a numeric offset", function () {
            var collection = Deque([1, 2, 5, 6]);
            expect(collection.swap(2, 0, [3, 4])).toEqual([]);
            expect(collection.toArray()).toEqual([1, 2, 3, 4, 5, 6]);
        });
        it("should replace values at a numeric offset", function () {
            var collection = Deque([1, 2, 3, 6]);
            expect(collection.swap(1, 2, [4, 5])).toEqual([2, 3]);
            expect(collection.toArray()).toEqual([1, 4, 5, 6]);
        });
        it("should inject values with implied position and length", function () {
            var collection = Deque([1, 2, 3, 4]);
            expect(collection.swap(null, null, [-1, 0])).toEqual([]);
            expect(collection.toArray()).toEqual([-1, 0, 1, 2, 3, 4]);
        });
        it("should append values", function () {
            var collection = Deque([1, 2, 3, 4]);
            expect(collection.swap(4, 0, [5, 6])).toEqual([]);
            expect(collection.toArray()).toEqual([1, 2, 3, 4, 5, 6]);
        });
    });
    if (!Deque.prototype.isSorted) {
        fuzzDeque(Deque);
    }
    // TODO peekBack
    // TODO pokeBack
    // from https://github.com/petkaantonov/deque
    describe("peek", function () {
        if (Deque.prototype.poke && Deque.prototype.peek) {
            it("peek and poke", function () {
                var deque = Deque([1, 2, 3, 4, 5, 6, 7, 8]);
                expect(deque.peek()).toBe(1);
                expect(deque.poke(2)).toBe(undefined);
                expect(deque.shift()).toBe(2);
                expect(deque.peek()).toBe(2);
            });
        }
        if (Deque.prototype.pokeBack && Deque.prototype.peekBack) {
            it("peekBack and pokeBack", function () {
                var deque = Deque([1, 2, 3, 4, 5, 6, 7, 8]);
                expect(deque.peekBack()).toBe(8);
                expect(deque.pokeBack(9)).toBe(undefined);
                expect(deque.pop()).toBe(9);
                expect(deque.peekBack()).toBe(7);
            });
        }
        if (!Deque.prototype.peek)
            return;
        it("returns undefined when empty deque", function () {
            var a = new Deque();
            expect(a.length).toBe(0);
            expect(a.peek()).toBe(undefined);
            expect(a.peek()).toBe(undefined);
            expect(a.length).toBe(0);
        });
        it("returns the item at the front of the deque", function () {
            var a = new Deque();
            a.push(1, 2, 3, 4, 5, 6, 7, 8, 9);
            expect(a.peek()).toBe(1);
            var l = 5;
            while (l--)
                a.pop();
            expect(a.toArray()).toEqual([1, 2, 3, 4]);
            expect(a.peek()).toBe(1);
            var l = 2;
            while (l--)
                a.shift();
            expect(a.peek()).toBe(3);
            expect(a.toArray()).toEqual([3, 4]);
            a.unshift(1, 2, 3, 4, 5, 6, 78, 89, 12901, 10121, 0, 12, 1, 2, 3, 4, 5, 6, 78, 89, 12901, 10121, 0, 12);
            expect(a.toArray()).toEqual([1, 2, 3, 4, 5, 6, 78, 89, 12901, 10121, 0, 12, 1, 2, 3, 4, 5, 6, 78, 89, 12901, 10121, 0, 12, 3, 4]);
            expect(a.peek()).toBe(1);
            a.push(1, 3, 4);
            expect(a.peek()).toBe(1);
            a.pop();
            a.shift();
            expect(a.peek()).toBe(2);
            expect(a.toArray()).toEqual([2, 3, 4, 5, 6, 78, 89, 12901, 10121, 0, 12, 1, 2, 3, 4, 5, 6, 78, 89, 12901, 10121, 0, 12, 3, 4, 1, 3]);
        });
    });
    describe("clear", function () {
        it("should clear the deque", function () {
            var a = new Deque([1, 2, 3, 4]);
            a.clear();
            expect(a.length).toBe(0);
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVxdWUuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL2pzLXByb3RvdHlwZXMvcGFja2FnZXMvY29sbGVjdGlvbnMvdGVzdC9zcGVjL2RlcXVlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0RUFBNEU7QUFDNUUsK0VBQStFO0FBQy9FLHNFQUFzRTtBQUN0RSw2RUFBNkU7QUFFN0UsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUVsRCxNQUFNLENBQUMsT0FBTyxHQUFHLGFBQWEsQ0FBQztBQUMvQixTQUFTLGFBQWEsQ0FBQyxLQUFLO0lBRXhCLFFBQVEsQ0FBQyxZQUFZLEVBQUU7UUFDbkIsRUFBRSxDQUFDLDZCQUE2QixFQUFFO1lBQzlCLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsYUFBYSxFQUFFO1FBQ3BCLEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRTtZQUNsQyxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQixNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2RCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGlCQUFpQixFQUFFO1FBQ3hCLEVBQUUsQ0FBQyxtQ0FBbUMsRUFBRTtZQUNwQyxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0QsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsZ0RBQWdELEVBQUU7WUFDakQsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QyxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsZ0JBQWdCLEVBQUU7UUFDdkIsRUFBRSxDQUFDLHFDQUFxQyxFQUFFO1lBQ3RDLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsb0JBQW9CLEVBQUU7UUFDM0IsRUFBRSxDQUFDLHlDQUF5QyxFQUFFO1lBQzFDLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzlCLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9ELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHlDQUF5QyxFQUFFO1lBQzFDLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xELE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FB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QUFtRCxFQUFFO1lBQ3BELElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QyxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsc0NBQXNDLEVBQUU7WUFDdkMsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDNUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsMEJBQTBCLEVBQUU7WUFDM0IsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZ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SyxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRTVHLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFekIsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDO1lBRWQsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUV6QixDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDUixDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7WUFFVixNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFcEgsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxPQUFPLEVBQUU7UUFDZCxFQUFFLENBQUMsd0JBQXdCLEVBQUU7WUFDekIsSUFBSSxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdCLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNWLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFFUCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRGVzY3JpYmUgQXJyYXksIExpc3QsIGFuZCBTb3J0ZWRTZXQsIGFsbCBvZiB3aGljaCBoYXZlIHRoZSBpbnRlcmZhY2Ugb2YgYVxuLy8gZG91YmxlLWVuZGVkIHF1ZXVlLiAgQXJyYXkgYW5kIExpc3QgYXJlIHByb3BlciBxdWV1ZXMgc2luY2UgcHVzaCBhbmQgdW5zaGlmdFxuLy8gcHV0IHRoZSB2YWx1ZXMgYXQgdGhlIGVuZHMsIGJ1dCBmb3Igc2FrZSBvZiByZXVzaW5nIHRoZXNlIHRlc3RzIGZvclxuLy8gU29ydGVkU2V0LCBhbGwgb2YgdGhlc2UgdGVzdHMgbWFpbnRhaW4gdGhlIHNvcnRlZCBvcmRlciBvZiB0aGUgY29sbGVjdGlvbi5cblxudmFyIGZ1enpEZXF1ZSA9IHJlcXVpcmUoXCIuL2RlcXVlLWZ1enpcIikuZnV6ekRlcXVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlc2NyaWJlRGVxdWU7XG5mdW5jdGlvbiBkZXNjcmliZURlcXVlKERlcXVlKSB7XG5cbiAgICBkZXNjcmliZShcImFkZCh2YWx1ZSlcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdChcInNob3VsZCBiZSBhbiBhbGlhcyBmb3IgcHVzaFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY29sbGVjdGlvbiA9IERlcXVlKFsxLCAyLCAzXSk7XG4gICAgICAgICAgICBjb2xsZWN0aW9uLmFkZCg0KTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLnRvQXJyYXkoKSkudG9FcXVhbChbMSwgMiwgMywgNF0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKFwicHVzaCh2YWx1ZSlcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdChcInNob3VsZCBhZGQgb25lIHZhbHVlIHRvIHRoZSBlbmRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNvbGxlY3Rpb24gPSBEZXF1ZShbMSwgMiwgM10pO1xuICAgICAgICAgICAgY29sbGVjdGlvbi5wdXNoKDQpO1xuICAgICAgICAgICAgZXhwZWN0KGNvbGxlY3Rpb24udG9BcnJheSgpKS50b0VxdWFsKFsxLCAyLCAzLCA0XSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoXCJwdXNoKC4uLnZhbHVlcylcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdChcInNob3VsZCBhZGQgbWFueSB2YWx1ZXMgdG8gdGhlIGVuZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY29sbGVjdGlvbiA9IERlcXVlKFsxLCAyLCAzXSk7XG4gICAgICAgICAgICBjb2xsZWN0aW9uLnB1c2goNCwgNSwgNik7XG4gICAgICAgICAgICBleHBlY3QoY29sbGVjdGlvbi50b0FycmF5KCkpLnRvRXF1YWwoWzEsIDIsIDMsIDQsIDUsIDZdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJzaG91bGQgYWRkIG1hbnkgdmFsdWVzIHRvIHRoZSBlbmQgdmFyaWFkaWNhbGx5XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gRGVxdWUoWzEsIDIsIDNdKTtcbiAgICAgICAgICAgIGNvbGxlY3Rpb24ucHVzaC5hcHBseShjb2xsZWN0aW9uLCBbNCwgNSwgNl0pO1xuICAgICAgICAgICAgZXhwZWN0KGNvbGxlY3Rpb24udG9BcnJheSgpKS50b0VxdWFsKFsxLCAyLCAzLCA0LCA1LCA2XSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoXCJ1bnNoaWZ0KHZhbHVlKVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGl0KFwic2hvdWxkIGFkZCBhIHZhbHVlIHRvIHRoZSBiZWdpbm5pbmdcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNvbGxlY3Rpb24gPSBEZXF1ZShbMSwgMiwgM10pO1xuICAgICAgICAgICAgY29sbGVjdGlvbi51bnNoaWZ0KDApO1xuICAgICAgICAgICAgZXhwZWN0KGNvbGxlY3Rpb24udG9BcnJheSgpKS50b0VxdWFsKFswLCAxLCAyLCAzXSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoXCJ1bnNoaWZ0KC4uLnZhbHVlcylcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdChcInNob3VsZCBhZGQgbWFueSB2YWx1ZXMgdG8gdGhlIGJlZ2lubmluZ1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY29sbGVjdGlvbiA9IERlcXVlKFsxLCAyLCAzXSk7XG4gICAgICAgICAgICBjb2xsZWN0aW9uLnVuc2hpZnQoLTIsIC0xLCAwKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLnRvQXJyYXkoKSkudG9FcXVhbChbLTIsIC0xLCAwLCAxLCAyLCAzXSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwic2hvdWxkIGFkZCBtYW55IHZhbHVlcyB0byB0aGUgYmVnaW5uaW5nXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gRGVxdWUoWzEsIDIsIDNdKTtcbiAgICAgICAgICAgIGNvbGxlY3Rpb24udW5zaGlmdC5hcHBseShjb2xsZWN0aW9uLCBbLTIsIC0xLCAwXSk7XG4gICAgICAgICAgICBleHBlY3QoY29sbGVjdGlvbi50b0FycmF5KCkpLnRvRXF1YWwoWy0yLCAtMSwgMCwgMSwgMiwgM10pO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKFwicG9wXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQoXCJzaG91bGQgcmVtb3ZlIG9uZSB2YWx1ZSBmcm9tIHRoZSBlbmQgYW5kIHJldHVybiBpdFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY29sbGVjdGlvbiA9IERlcXVlKFsxLCAyLCAzXSk7XG4gICAgICAgICAgICBleHBlY3QoY29sbGVjdGlvbi5wb3AoKSkudG9FcXVhbCgzKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLnRvQXJyYXkoKSkudG9FcXVhbChbMSwgMl0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKFwic2hpZnRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdChcInNob3VsZCByZW1vdmUgb25lIHZhbHVlIGZyb20gdGhlIGJlZ2lubmluZyBhbmQgcmV0dXJuIGl0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gRGVxdWUoWzEsIDIsIDNdKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLnNoaWZ0KCkpLnRvRXF1YWwoMSk7XG4gICAgICAgICAgICBleHBlY3QoY29sbGVjdGlvbi50b0FycmF5KCkpLnRvRXF1YWwoWzIsIDNdKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZShcImNvbmNhdFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGl0KFwic2hvdWxkIGNvbmNhdGVuYXRlIHZhcmlhZGljIG1peGVkLXR5cGUgY29sbGVjdGlvbnNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNvbGxlY3Rpb24gPSBEZXF1ZShbMSwgMiwgM10pLmNvbmNhdChcbiAgICAgICAgICAgICAgICBbNCwgNSwgNl0sXG4gICAgICAgICAgICAgICAgRGVxdWUoWzcsIDgsIDldKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLnRvQXJyYXkoKSkudG9FcXVhbChbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOV0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKFwic2xpY2VcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIURlcXVlLnByb3RvdHlwZS5zbGljZSlcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICB2YXIgY29sbGVjdGlvbiA9IERlcXVlKFsxLCAyLCAzLCA0XSk7XG5cbiAgICAgICAgaXQoXCJzaG91bGQgc2xpY2UgYWxsIHZhbHVlcyB3aXRoIG5vIGFyZ3VtZW50c1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBleHBlY3QoY29sbGVjdGlvbi5zbGljZSgpKS50b0VxdWFsKFsxLCAyLCAzLCA0XSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwic2hvdWxkIHNsaWNlIGFsbCBhZnRlciBhbiBpbmRleFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBleHBlY3QoY29sbGVjdGlvbi5zbGljZSgyKSkudG9FcXVhbChbMywgNF0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcInNob3VsZCBzbGljZSBmcm9tIHRoZSBtaWRkbGUgYnkgaW5kZXhlZCBwb3NpdGlvbnNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZXhwZWN0KGNvbGxlY3Rpb24uc2xpY2UoMSwgMykpLnRvRXF1YWwoWzIsIDNdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJzaG91bGQgc2xpY2UgZnJvbSBhIG5lZ2F0aXZlIGluZGV4XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLnNsaWNlKC0yKSkudG9FcXVhbChbMywgNF0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcInNob3VsZCBzbGljZSBmcm9tIGEgbmVnYXRpdmUgaW5kZXggdG8gYSBwb3NpdGl2ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBleHBlY3QoY29sbGVjdGlvbi5zbGljZSgtMiwgMykpLnRvRXF1YWwoWzNdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJzaG91bGQgc2xpY2UgZnJvbSBhIG5lZ2F0aXZlIGluZGV4IHRvIGEgbmVnYXRpdmVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZXhwZWN0KGNvbGxlY3Rpb24uc2xpY2UoLTIsIC0xKSkudG9FcXVhbChbM10pO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBUT0RPXG4gICAgICAgIC8qXG4gICAgICAgIGl0KFwic2hvdWxkIHNsaWNlIGZyb20gYSBuZWdhdGl2ZSBpbmRleCB0byB6ZXJvXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLnNsaWNlKC0yLCAwKSkudG9FcXVhbChbXSk7IC8vIEFycmF5XG4gICAgICAgICAgICBleHBlY3QoY29sbGVjdGlvbi5zbGljZSgtMiwgMCkpLnRvRXF1YWwoWzMsIDRdKTsgLy8gTGlzdFxuICAgICAgICB9KTtcbiAgICAgICAgKi9cblxuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoXCJzcGxpY2VcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIURlcXVlLnByb3RvdHlwZS5zcGxpY2UpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgaXQoXCJzaG91bGQgZG8gbm90aGluZyB3aXRoIG5vIGFyZ3VtZW50c1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY29sbGVjdGlvbiA9IERlcXVlKFsxLCAyLCAzLCA0XSk7XG4gICAgICAgICAgICBleHBlY3QoY29sbGVjdGlvbi5zcGxpY2UoKSkudG9FcXVhbChbXSk7XG4gICAgICAgICAgICBleHBlY3QoY29sbGVjdGlvbi50b0FycmF5KCkpLnRvRXF1YWwoWzEsIDIsIDMsIDRdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJzaG91bGQgc3BsaWNlIHRvIGVuZCB3aXRoIG9ubHkgYW4gb2Zmc2V0IGFyZ3VtZW50XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gRGVxdWUoWzEsIDIsIDMsIDRdKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLnNwbGljZSgyKSkudG9FcXVhbChbMywgNF0pO1xuICAgICAgICAgICAgZXhwZWN0KGNvbGxlY3Rpb24udG9BcnJheSgpKS50b0VxdWFsKFsxLCAyXSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwic2hvdWxkIHNwbGljZSBub3RoaW5nIHdpdGggbm8gbGVuZ3RoXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gRGVxdWUoWzEsIDIsIDMsIDRdKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLnNwbGljZSgyLCAwKSkudG9FcXVhbChbXSk7XG4gICAgICAgICAgICBleHBlY3QoY29sbGVjdGlvbi50b0FycmF5KCkpLnRvRXF1YWwoWzEsIDIsIDMsIDRdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJzaG91bGQgc3BsaWNlIGFsbCB2YWx1ZXNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNvbGxlY3Rpb24gPSBEZXF1ZShbMSwgMiwgMywgNF0pO1xuICAgICAgICAgICAgZXhwZWN0KGNvbGxlY3Rpb24uc3BsaWNlKDAsIGNvbGxlY3Rpb24ubGVuZ3RoKSkudG9FcXVhbChbMSwgMiwgMywgNF0pO1xuICAgICAgICAgICAgZXhwZWN0KGNvbGxlY3Rpb24udG9BcnJheSgpKS50b0VxdWFsKFtdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJzaG91bGQgc3BsaWNlIGZyb20gbmVnYXRpdmUgb2Zmc2V0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gRGVxdWUoWzEsIDIsIDMsIDRdKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLnNwbGljZSgtMikpLnRvRXF1YWwoWzMsIDRdKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLnRvQXJyYXkoKSkudG9FcXVhbChbMSwgMl0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcInNob3VsZCBpbmplY3QgdmFsdWVzIGF0IGEgbnVtZXJpYyBvZmZzZXRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNvbGxlY3Rpb24gPSBEZXF1ZShbMSwgMiwgNSwgNl0pO1xuICAgICAgICAgICAgZXhwZWN0KGNvbGxlY3Rpb24uc3BsaWNlKDIsIDAsIDMsIDQpKS50b0VxdWFsKFtdKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLnRvQXJyYXkoKSkudG9FcXVhbChbMSwgMiwgMywgNCwgNSwgNl0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcInNob3VsZCByZXBsYWNlIHZhbHVlcyBhdCBhIG51bWVyaWMgb2Zmc2V0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gRGVxdWUoWzEsIDIsIDMsIDZdKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLnNwbGljZSgxLCAyLCA0LCA1KSkudG9FcXVhbChbMiwgM10pO1xuICAgICAgICAgICAgZXhwZWN0KGNvbGxlY3Rpb24udG9BcnJheSgpKS50b0VxdWFsKFsxLCA0LCA1LCA2XSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwic2hvdWxkIGluamVjdCB2YWx1ZXMgd2l0aCBpbXBsaWVkIHBvc2l0aW9uIGFuZCBsZW5ndGhcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNvbGxlY3Rpb24gPSBEZXF1ZShbMSwgMiwgMywgNF0pO1xuICAgICAgICAgICAgZXhwZWN0KGNvbGxlY3Rpb24uc3BsaWNlKG51bGwsIG51bGwsIC0xLCAwKSkudG9FcXVhbChbXSk7XG4gICAgICAgICAgICBleHBlY3QoY29sbGVjdGlvbi50b0FycmF5KCkpLnRvRXF1YWwoWy0xLCAwLCAxLCAyLCAzLCA0XSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwic2hvdWxkIGFwcGVuZCB2YWx1ZXNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNvbGxlY3Rpb24gPSBEZXF1ZShbMSwgMiwgMywgNF0pO1xuICAgICAgICAgICAgZXhwZWN0KGNvbGxlY3Rpb24uc3BsaWNlKDQsIDAsIDUsIDYpKS50b0VxdWFsKFtdKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLnRvQXJyYXkoKSkudG9FcXVhbChbMSwgMiwgMywgNCwgNSwgNl0pO1xuICAgICAgICB9KTtcblxuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoXCJzd2FwXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFEZXF1ZS5wcm90b3R5cGUuc3dhcClcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBpdChcInNob3VsZCBkbyBub3RoaW5nIHdpdGggbm8gYXJndW1lbnRzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gRGVxdWUoWzEsIDIsIDMsIDRdKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLnN3YXAoKSkudG9FcXVhbChbXSk7XG4gICAgICAgICAgICBleHBlY3QoY29sbGVjdGlvbi50b0FycmF5KCkpLnRvRXF1YWwoWzEsIDIsIDMsIDRdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJzaG91bGQgc3BsaWNlIHRvIGVuZCB3aXRoIG9ubHkgYW4gb2Zmc2V0IGFyZ3VtZW50XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gRGVxdWUoWzEsIDIsIDMsIDRdKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLnN3YXAoMikpLnRvRXF1YWwoWzMsIDRdKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLnRvQXJyYXkoKSkudG9FcXVhbChbMSwgMl0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcInNob3VsZCBzcGxpY2Ugbm90aGluZyB3aXRoIG5vIGxlbmd0aFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY29sbGVjdGlvbiA9IERlcXVlKFsxLCAyLCAzLCA0XSk7XG4gICAgICAgICAgICBleHBlY3QoY29sbGVjdGlvbi5zd2FwKDIsIDApKS50b0VxdWFsKFtdKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLnRvQXJyYXkoKSkudG9FcXVhbChbMSwgMiwgMywgNF0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcInNob3VsZCBzcGxpY2UgYWxsIHZhbHVlc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY29sbGVjdGlvbiA9IERlcXVlKFsxLCAyLCAzLCA0XSk7XG4gICAgICAgICAgICBleHBlY3QoY29sbGVjdGlvbi5zd2FwKDAsIGNvbGxlY3Rpb24ubGVuZ3RoKSkudG9FcXVhbChbMSwgMiwgMywgNF0pO1xuICAgICAgICAgICAgZXhwZWN0KGNvbGxlY3Rpb24udG9BcnJheSgpKS50b0VxdWFsKFtdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJzaG91bGQgc3BsaWNlIGZyb20gbmVnYXRpdmUgb2Zmc2V0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gRGVxdWUoWzEsIDIsIDMsIDRdKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLnN3YXAoLTIpKS50b0VxdWFsKFszLCA0XSk7XG4gICAgICAgICAgICBleHBlY3QoY29sbGVjdGlvbi50b0FycmF5KCkpLnRvRXF1YWwoWzEsIDJdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJzaG91bGQgaW5qZWN0IHZhbHVlcyBhdCBhIG51bWVyaWMgb2Zmc2V0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gRGVxdWUoWzEsIDIsIDUsIDZdKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLnN3YXAoMiwgMCwgWzMsIDRdKSkudG9FcXVhbChbXSk7XG4gICAgICAgICAgICBleHBlY3QoY29sbGVjdGlvbi50b0FycmF5KCkpLnRvRXF1YWwoWzEsIDIsIDMsIDQsIDUsIDZdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJzaG91bGQgcmVwbGFjZSB2YWx1ZXMgYXQgYSBudW1lcmljIG9mZnNldFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY29sbGVjdGlvbiA9IERlcXVlKFsxLCAyLCAzLCA2XSk7XG4gICAgICAgICAgICBleHBlY3QoY29sbGVjdGlvbi5zd2FwKDEsIDIsIFs0LCA1XSkpLnRvRXF1YWwoWzIsIDNdKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLnRvQXJyYXkoKSkudG9FcXVhbChbMSwgNCwgNSwgNl0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcInNob3VsZCBpbmplY3QgdmFsdWVzIHdpdGggaW1wbGllZCBwb3NpdGlvbiBhbmQgbGVuZ3RoXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gRGVxdWUoWzEsIDIsIDMsIDRdKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLnN3YXAobnVsbCwgbnVsbCwgWy0xLCAwXSkpLnRvRXF1YWwoW10pO1xuICAgICAgICAgICAgZXhwZWN0KGNvbGxlY3Rpb24udG9BcnJheSgpKS50b0VxdWFsKFstMSwgMCwgMSwgMiwgMywgNF0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcInNob3VsZCBhcHBlbmQgdmFsdWVzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gRGVxdWUoWzEsIDIsIDMsIDRdKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xsZWN0aW9uLnN3YXAoNCwgMCwgWzUsIDZdKSkudG9FcXVhbChbXSk7XG4gICAgICAgICAgICBleHBlY3QoY29sbGVjdGlvbi50b0FycmF5KCkpLnRvRXF1YWwoWzEsIDIsIDMsIDQsIDUsIDZdKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBcbiAgICBpZiAoIURlcXVlLnByb3RvdHlwZS5pc1NvcnRlZCkge1xuICAgICAgICBmdXp6RGVxdWUoRGVxdWUpO1xuICAgIH1cblxuICAgIC8vIFRPRE8gcGVla0JhY2tcbiAgICAvLyBUT0RPIHBva2VCYWNrXG5cbiAgICAvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9wZXRrYWFudG9ub3YvZGVxdWVcblxuICAgIGRlc2NyaWJlKFwicGVla1wiLCBmdW5jdGlvbiAoKSB7XG5cblxuICAgICAgICBpZiAoRGVxdWUucHJvdG90eXBlLnBva2UgJiYgRGVxdWUucHJvdG90eXBlLnBlZWspIHtcbiAgICAgICAgICAgIGl0KFwicGVlayBhbmQgcG9rZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlcXVlID0gRGVxdWUoWzEsIDIsIDMsIDQsIDUsIDYsIDcsIDhdKTtcbiAgICAgICAgICAgICAgICBleHBlY3QoZGVxdWUucGVlaygpKS50b0JlKDEpO1xuICAgICAgICAgICAgICAgIGV4cGVjdChkZXF1ZS5wb2tlKDIpKS50b0JlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KGRlcXVlLnNoaWZ0KCkpLnRvQmUoMik7XG4gICAgICAgICAgICAgICAgZXhwZWN0KGRlcXVlLnBlZWsoKSkudG9CZSgyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKERlcXVlLnByb3RvdHlwZS5wb2tlQmFjayAmJiBEZXF1ZS5wcm90b3R5cGUucGVla0JhY2spIHtcbiAgICAgICAgICAgIGl0KFwicGVla0JhY2sgYW5kIHBva2VCYWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVxdWUgPSBEZXF1ZShbMSwgMiwgMywgNCwgNSwgNiwgNywgOF0pO1xuICAgICAgICAgICAgICAgIGV4cGVjdChkZXF1ZS5wZWVrQmFjaygpKS50b0JlKDgpO1xuICAgICAgICAgICAgICAgIGV4cGVjdChkZXF1ZS5wb2tlQmFjayg5KSkudG9CZSh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIGV4cGVjdChkZXF1ZS5wb3AoKSkudG9CZSg5KTtcbiAgICAgICAgICAgICAgICBleHBlY3QoZGVxdWUucGVla0JhY2soKSkudG9CZSg3KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFEZXF1ZS5wcm90b3R5cGUucGVlaylcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBpdChcInJldHVybnMgdW5kZWZpbmVkIHdoZW4gZW1wdHkgZGVxdWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYSA9IG5ldyBEZXF1ZSgpO1xuICAgICAgICAgICAgZXhwZWN0KGEubGVuZ3RoKS50b0JlKDApO1xuICAgICAgICAgICAgZXhwZWN0KGEucGVlaygpKS50b0JlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICBleHBlY3QoYS5wZWVrKCkpLnRvQmUodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIGV4cGVjdChhLmxlbmd0aCkudG9CZSgwKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJyZXR1cm5zIHRoZSBpdGVtIGF0IHRoZSBmcm9udCBvZiB0aGUgZGVxdWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYSA9IG5ldyBEZXF1ZSgpO1xuICAgICAgICAgICAgYS5wdXNoKDEsMiwzLDQsNSw2LDcsOCw5KTtcblxuICAgICAgICAgICAgZXhwZWN0KGEucGVlaygpKS50b0JlKDEpO1xuXG4gICAgICAgICAgICB2YXIgbCA9IDU7XG4gICAgICAgICAgICB3aGlsZShsLS0pIGEucG9wKCk7XG5cbiAgICAgICAgICAgIGV4cGVjdChhLnRvQXJyYXkoKSkudG9FcXVhbChbMSwgMiwgMywgNF0pO1xuXG4gICAgICAgICAgICBleHBlY3QoYS5wZWVrKCkpLnRvQmUoMSk7XG5cbiAgICAgICAgICAgIHZhciBsID0gMjtcbiAgICAgICAgICAgIHdoaWxlIChsLS0pIGEuc2hpZnQoKTtcblxuICAgICAgICAgICAgZXhwZWN0KGEucGVlaygpKS50b0JlKDMpO1xuXG4gICAgICAgICAgICBleHBlY3QoYS50b0FycmF5KCkpLnRvRXF1YWwoWzMsIDRdKTtcblxuICAgICAgICAgICAgYS51bnNoaWZ0KDEsMiwzLDQsNSw2LDc4LDg5LDEyOTAxLDEwMTIxLDAsMTIsIDEsMiwzLDQsNSw2LDc4LDg5LDEyOTAxLDEwMTIxLDAsMTIpO1xuXG4gICAgICAgICAgICBleHBlY3QoYS50b0FycmF5KCkpLnRvRXF1YWwoWzEsMiwzLDQsNSw2LDc4LDg5LDEyOTAxLDEwMTIxLDAsMTIsIDEsMiwzLDQsNSw2LDc4LDg5LDEyOTAxLDEwMTIxLDAsMTIsIDMsIDRdKTtcblxuICAgICAgICAgICAgZXhwZWN0KGEucGVlaygpKS50b0JlKDEpO1xuXG4gICAgICAgICAgICBhLnB1c2goMSwzLDQpO1xuXG4gICAgICAgICAgICBleHBlY3QoYS5wZWVrKCkpLnRvQmUoMSk7XG5cbiAgICAgICAgICAgIGEucG9wKCk7XG4gICAgICAgICAgICBhLnNoaWZ0KCk7XG5cbiAgICAgICAgICAgIGV4cGVjdChhLnBlZWsoKSkudG9CZSgyKTtcbiAgICAgICAgICAgIGV4cGVjdChhLnRvQXJyYXkoKSkudG9FcXVhbChbMiwzLDQsNSw2LDc4LDg5LDEyOTAxLDEwMTIxLDAsMTIsIDEsMiwzLDQsNSw2LDc4LDg5LDEyOTAxLDEwMTIxLDAsMTIsIDMsIDQsIDEsIDNdKTtcblxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKFwiY2xlYXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdChcInNob3VsZCBjbGVhciB0aGUgZGVxdWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYSA9IG5ldyBEZXF1ZShbMSwyLDMsNF0pO1xuICAgICAgICAgICAgYS5jbGVhcigpO1xuICAgICAgICAgICAgZXhwZWN0KGEubGVuZ3RoKS50b0JlKDApO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxufVxuXG4iXX0=