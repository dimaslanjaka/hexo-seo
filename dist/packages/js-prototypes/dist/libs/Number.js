"use strict";
Number.prototype.getMS = function (type) {
    var self = this;
    return this * 60 * 1000;
};
Number.prototype.addHour = function (source) {
    var self = this;
    var Hour = this * 60 * 1000; /* ms */
    if (!source)
        source = new Date();
    return new Date(source.getTime() + Hour).getTime();
};
Number.prototype.AddZero = function (b, c) {
    var l = String(b || 10).length - String(this).length + 1;
    return l > 0 ? new Array(l).join(c || "0") + this : this;
};
/**
 * Odd or Even (Ganjil Genap);
 * @param n
 * @param type odd or even
 */
function oddoreven(n, type) {
    if (!type) {
        type = "odd";
    }
    var time = !n ? new Date().getDay() : Number(n);
    if (!/^-?\d+jQuery/.test(time.toString())) {
        alert("arguments is not number, please remove quote");
        return null;
    }
    var hasil = time % 2;
    var rType = /^(odd|ganjil)$/.test(type) ? "1" : "0";
    //return hasil == (type == ('odd' || 'ganjil') ? 1 : 0);
    return hasil.toString() == rType.toString();
}
/**
 * strpad / startwith zero [0]
 * @param {number} val
 */
function strpad(val) {
    if (val >= 10) {
        return val;
    }
    else {
        return "0" + val;
    }
}
/**
 * is variable number?
 * @param n
 * @returns
 */
function isInt(n) {
    return Number(n) === n && n % 1 === 0;
}
/**
 * is variable float?
 * @param n
 * @returns
 */
function isFloat(n) {
    return Number(n) === n && n % 1 !== 0;
}
if (typeof module.exports != 'undefined') {
    global.isInt = isInt;
    global.isFloat = isFloat;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTnVtYmVyLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9qcy1wcm90b3R5cGVzL2Rpc3QvbGlicy9OdW1iZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFVBQVUsSUFBSTtJQUNuQyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7SUFDaEIsT0FBTyxJQUFJLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztBQUM1QixDQUFDLENBQUM7QUFDRixNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sR0FBRyxVQUFVLE1BQU07SUFDdkMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ2hCLElBQUksSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsUUFBUTtJQUNyQyxJQUFJLENBQUMsTUFBTTtRQUNQLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO0lBQ3hCLE9BQU8sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3ZELENBQUMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUM7SUFDckMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDekQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQzdELENBQUMsQ0FBQztBQUNGOzs7O0dBSUc7QUFDSCxTQUFTLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSTtJQUN0QixJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ1AsSUFBSSxHQUFHLEtBQUssQ0FBQztLQUNoQjtJQUNELElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUU7UUFDdkMsS0FBSyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7UUFDdEQsT0FBTyxJQUFJLENBQUM7S0FDZjtJQUNELElBQUksS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUM7SUFDckIsSUFBSSxLQUFLLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUNwRCx3REFBd0Q7SUFDeEQsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ2hELENBQUM7QUFDRDs7O0dBR0c7QUFDSCxTQUFTLE1BQU0sQ0FBQyxHQUFHO0lBQ2YsSUFBSSxHQUFHLElBQUksRUFBRSxFQUFFO1FBQ1gsT0FBTyxHQUFHLENBQUM7S0FDZDtTQUNJO1FBQ0QsT0FBTyxHQUFHLEdBQUcsR0FBRyxDQUFDO0tBQ3BCO0FBQ0wsQ0FBQztBQUNEOzs7O0dBSUc7QUFDSCxTQUFTLEtBQUssQ0FBQyxDQUFDO0lBQ1osT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFDLENBQUM7QUFDRDs7OztHQUlHO0FBQ0gsU0FBUyxPQUFPLENBQUMsQ0FBQztJQUNkLE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxQyxDQUFDO0FBQ0QsSUFBSSxPQUFPLE1BQU0sQ0FBQyxPQUFPLElBQUksV0FBVyxFQUFFO0lBQ3RDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0NBQzVCIiwic291cmNlc0NvbnRlbnQiOlsiTnVtYmVyLnByb3RvdHlwZS5nZXRNUyA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiB0aGlzICogNjAgKiAxMDAwO1xufTtcbk51bWJlci5wcm90b3R5cGUuYWRkSG91ciA9IGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIEhvdXIgPSB0aGlzICogNjAgKiAxMDAwOyAvKiBtcyAqL1xuICAgIGlmICghc291cmNlKVxuICAgICAgICBzb3VyY2UgPSBuZXcgRGF0ZSgpO1xuICAgIHJldHVybiBuZXcgRGF0ZShzb3VyY2UuZ2V0VGltZSgpICsgSG91cikuZ2V0VGltZSgpO1xufTtcbk51bWJlci5wcm90b3R5cGUuQWRkWmVybyA9IGZ1bmN0aW9uIChiLCBjKSB7XG4gICAgdmFyIGwgPSBTdHJpbmcoYiB8fCAxMCkubGVuZ3RoIC0gU3RyaW5nKHRoaXMpLmxlbmd0aCArIDE7XG4gICAgcmV0dXJuIGwgPiAwID8gbmV3IEFycmF5KGwpLmpvaW4oYyB8fCBcIjBcIikgKyB0aGlzIDogdGhpcztcbn07XG4vKipcbiAqIE9kZCBvciBFdmVuIChHYW5qaWwgR2VuYXApO1xuICogQHBhcmFtIG5cbiAqIEBwYXJhbSB0eXBlIG9kZCBvciBldmVuXG4gKi9cbmZ1bmN0aW9uIG9kZG9yZXZlbihuLCB0eXBlKSB7XG4gICAgaWYgKCF0eXBlKSB7XG4gICAgICAgIHR5cGUgPSBcIm9kZFwiO1xuICAgIH1cbiAgICB2YXIgdGltZSA9ICFuID8gbmV3IERhdGUoKS5nZXREYXkoKSA6IE51bWJlcihuKTtcbiAgICBpZiAoIS9eLT9cXGQralF1ZXJ5Ly50ZXN0KHRpbWUudG9TdHJpbmcoKSkpIHtcbiAgICAgICAgYWxlcnQoXCJhcmd1bWVudHMgaXMgbm90IG51bWJlciwgcGxlYXNlIHJlbW92ZSBxdW90ZVwiKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBoYXNpbCA9IHRpbWUgJSAyO1xuICAgIHZhciByVHlwZSA9IC9eKG9kZHxnYW5qaWwpJC8udGVzdCh0eXBlKSA/IFwiMVwiIDogXCIwXCI7XG4gICAgLy9yZXR1cm4gaGFzaWwgPT0gKHR5cGUgPT0gKCdvZGQnIHx8ICdnYW5qaWwnKSA/IDEgOiAwKTtcbiAgICByZXR1cm4gaGFzaWwudG9TdHJpbmcoKSA9PSByVHlwZS50b1N0cmluZygpO1xufVxuLyoqXG4gKiBzdHJwYWQgLyBzdGFydHdpdGggemVybyBbMF1cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWxcbiAqL1xuZnVuY3Rpb24gc3RycGFkKHZhbCkge1xuICAgIGlmICh2YWwgPj0gMTApIHtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBcIjBcIiArIHZhbDtcbiAgICB9XG59XG4vKipcbiAqIGlzIHZhcmlhYmxlIG51bWJlcj9cbiAqIEBwYXJhbSBuXG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiBpc0ludChuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuKSA9PT0gbiAmJiBuICUgMSA9PT0gMDtcbn1cbi8qKlxuICogaXMgdmFyaWFibGUgZmxvYXQ/XG4gKiBAcGFyYW0gblxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gaXNGbG9hdChuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuKSA9PT0gbiAmJiBuICUgMSAhPT0gMDtcbn1cbmlmICh0eXBlb2YgbW9kdWxlLmV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBnbG9iYWwuaXNJbnQgPSBpc0ludDtcbiAgICBnbG9iYWwuaXNGbG9hdCA9IGlzRmxvYXQ7XG59XG4iXX0=